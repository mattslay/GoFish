*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="gofishui.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS gf_combosearchexpressionhistory AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: loadrows
		*m: opentable
		*m: savesearchexpression
		*p: ctable
		*p: nexpressionstostore
		*p: nmaxmru
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Anchor = 10
		ctable = 
		Height = 24
		Name = "gf_combosearchexpressionhistory"
		nexpressionstostore = 15
		nmaxmru = 7
		Visible = .F.
		Width = 100
		_memberdata = <VFPData>
			<memberdata name="nexpressionstostore" display="nExpressionsToStore"/>
			<memberdata name="opentable" display="OpenTable"/>
			<memberdata name="loadrows" display="LoadRows"/>
			<memberdata name="ctable" display="cTable"/>
			<memberdata name="savesearchexpression" display="SaveSearchExpression"/>
			<memberdata name="nmaxmru" display="nMaxMRU"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Click
		This.Visible = .F.
		
		With This.Parent.editSearch
			.Value = Rtrim(This.Value)
			.SetFocus()
			.SelStart = 999
		Endwith
		
		lcValue = This.value
		This.SaveSearchExpression(This.Value) && Will move this entry to the top of the list
		This.Value = Alltrim(lcValue)
		
		
	ENDPROC

	PROCEDURE Init
		this.Top = this.Parent.editSearch.top
		
		*SF 20221018 -> local storage
		*This.cTable = Addbs(Home(7)) + 'GF_Search_Expression_History.dbf'
		This.cTable = Thisform.cCR_StoreLocal + 'GF_Search_Expression_History.dbf'
		*/SF 20221018 -> local storage
		
		This.LoadRows()
		
		
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		If nKeyCode = 27 && ESC Key
			this.Tag = 'ESCAPE'
			this.Visible = .f.
			This.Parent.editSearch.SetFocus()
			This.Parent.editSearch.SelStart = 999
			This.Parent.editSearch.SelLength = 1
			NoDefault 
		EndIf
		
		
		
	ENDPROC

	PROCEDURE loadrows
		Local lItemExists, lcItem, lnSelect, lnCounter
		Local;
			lcScope    As String,;
			llNoFilter As Boolean
		
		
		lcScope    = ''
		llNoFilter = .T.
		If Thisform.lCR_Allowed And Thisform.lCR_SearchComboPerScope Then
			lcScope    = Lower(Thisform.GetCurrentScope())
			llNoFilter = .F.
		Endif &&Thisform.lCR_Allowed And Thisform.lCR_StorePerScope
		
		lnCounter = 0
		
		lnSelect = Select()
		
		This.OpenTable()
		
		*-- Rebuild the combobox values -------------------------------
		This.RowSource = '' && Clear out rows
		
		Scan For m.llNoFilter Or lcScope==Lower(Trim(scope))
		
			lcItem = Alltrim(Lower(Expression))
			lItemExists = .F. && assume the value isn't in the list.
		
			For i = 1 To This.ListCount
				If Alltrim(Lower(This.List(i))) == lcItem
					lItemExists = .T.
					Exit
				Endif
			Endfor
		
			If !lItemExists
				This.AddItem(lcItem)
				lnCounter = lnCounter + 1
				If lnCounter = This.nMaxMRU
					Exit
				Endif
			Endif
		Endscan &&m.llNoFilter Or lcScope==Lower(Trim(scope))
		
		Use
		Thisform.SaveDBC_Close()
		
		This.Refresh()
		
		Select (lnSelect)
		
	ENDPROC

	PROCEDURE LostFocus
		this.Visible = .f.
		
	ENDPROC

	PROCEDURE opentable
		Local lcSearchExpressionTable
		
		lcSearchExpressionTable = This.cTable
		
		If !Used(Juststem(lcSearchExpressionTable)) Then
			Thisform.SaveDBC_Open()
		
			If !File(lcSearchExpressionTable)
		*	Create Table (lcSearchExpressionTable) Free (Expression C(128), Item I, scope C(254))
				Create Table (lcSearchExpressionTable) (Expression C(128), Item I, scope C(254))
				INDEX ON Item TAG _Item
				Append Blank
				Use
			Endif
		
			If !Used(Juststem(lcSearchExpressionTable))
				Select 0
				Try
						Use (lcSearchExpressionTable) Exclusive
						Pack
						Use
		
					Catch
				Endtry
		
				Use (lcSearchExpressionTable) ORDER _Item
			Endif
		Endif &&!Used(Juststem(lcSearchExpressionTable))
		
		Select (Juststem(lcSearchExpressionTable))
		Goto Top
		
	ENDPROC

	PROCEDURE Refresh
		Try
			This.Enabled = !Thisform.lSearching&& and !Thisform.lReplaceMode
		Catch
		Endtry
		
		
	ENDPROC

	PROCEDURE savesearchexpression
		Lparameters tcSearchExpression
		
		Local lcScope, lcTable, lnExpressionsToStore
		
		If Empty(tcSearchExpression)
			Return
		Endif
		
		lnExpressionsToStore = This.nExpressionsToStore	&&MRU
		lcTable              = Juststem(This.cTable)
		lcScope              = Lower(Thisform.GetCurrentScope())
		
		*--- Pull other records from the scope out of expression hist table
		This.OpenTable()
		
		Locate;
			For Rtrim(Expression) == Rtrim(m.tcSearchExpression)
		
		If !Found() Then
			Replace All;
				Item With Item + 1;
				In (m.lcTable)
		
			Insert Into (m.lcTable);
				(Expression, Item, scope) ;
				values;
				(m.tcSearchExpression, 1, m.lcScope)
		
			Delete;
				FOR Item > m.lnExpressionsToStore;
				In (m.lcTable)
		
		Endif &&!FOUND()
		
		Use In Select(m.lcTable)
		Thisform.SaveDBC_Close()
		
		This.LoadRows()
		
	ENDPROC

	PROCEDURE Valid
		If This.Tag = 'ESCAPE'
			With This.Parent.editSearch
				.Value = This.Parent.comboSearchExpressionHistoryDropDownArrow.Tag
				.SelStart = 999
				.SelLength = 1
			Endwith
			This.Tag = ''
		Endif
		
		lItemExists = .F. && assume the value isn't in the list.
		For i = 1 To This.ListCount
			If Lower(This.List(i)) = Lower(This.Text)
				lItemExists = .T.
				Exit
			Endif
		Endfor
		
		If !lItemExists
			This.AddItem(Lower(This.Text))
		Endif
		
		
		This.Value = This.Text
		
		Thisform.Refresh()
	ENDPROC

ENDDEFINE
