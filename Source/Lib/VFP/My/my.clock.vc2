*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS clock AS mybase OF "my.vcx" 		&& Provides properties and methods to handle local and GMT date and time
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: convertgmttolocal		&& Converts the specified GMT date and time to local
		*m: convertlocaltogmt		&& Converts the specified local date and time to GMT
		*m: gmttime_access
		*m: gmttime_assign
		*m: localtime_access
		*m: localtime_assign
		*m: timezonedescription_assign
		*m: timezoneoffset_assign
		*p: gmttime		&& The current date and time as GMT
		*p: localtime		&& The current local date and time
		*p: timezonedescription		&& The description for the current time zone
		*p: timezoneoffset		&& The offset from the current time zone to GMT in seconds
	*</DefinedPropArrayMethod>

	*<PropValue>
		cnamespace = My.Computer.Clock
		gmttime = {}
		localtime = (/:}
		Name = "clock"
		timezonedescription = 
		timezoneoffset = 0
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="warning" type="method" display="Warning"/>
			<memberdata name="ccaption" type="property" display="cCaption"/>
			<memberdata name="errormessage" type="property" display="ErrorMessage"/>
			<memberdata name="quietmode" type="property" display="QuietMode"/>
			<memberdata name="calledfromthisclass" type="method" display="CalledFromThisClass"/>
			<memberdata name="timezonedescription" type="property" display="TimeZoneDescription"/>
			<memberdata name="timezoneoffset" type="property" display="TimeZoneOffset"/>
			<memberdata name="timezonedescription_assign" type="method" display="TimeZoneDescription_Assign"/>
			<memberdata name="timezoneoffset_assign" type="method" display="TimeZoneOffset_Assign"/>
			<memberdata name="localtime" type="property" display="LocalTime"/>
			<memberdata name="localtime_access" type="method" display="LocalTime_Access"/>
			<memberdata name="localtime_assign" type="method" display="LocalTime_Assign"/>
			<memberdata name="gmttime" type="property" display="GMTTime"/>
			<memberdata name="gmttime_access" type="method" display="GMTTime_Access"/>
			<memberdata name="gmttime_assign" type="method" display="GMTTime_Assign"/>
			<memberdata name="convertlocaltogmt" type="method" display="ConvertLocalToGMT"/>
			<memberdata name="convertgmttolocal" type="method" display="ConvertGMTToLocal"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE convertgmttolocal		&& Converts the specified GMT date and time to local
		lparameters GMTTime as DateTime
		local ltGMTTime, ;
			ltLocalTime
		do case
			case vartype(GMTTime) = 'D'
				ltGMTTime = dtot(GMTTime)
			case vartype(GMTTime) = 'T'
				ltGMTTime = GMTTime
			otherwise
				error 11
				return .NULL.
		endcase
		ltLocalTime = ltGMTTime - This.TimeZoneOffset
		return ltLocalTime
		
	ENDPROC

	PROCEDURE convertlocaltogmt		&& Converts the specified local date and time to GMT
		lparameters LocalTime as DateTime
		local ltLocalTime, ;
			ltGMTTime
		do case
			case vartype(LocalTime) = 'D'
				ltLocalTime = dtot(LocalTime)
			case vartype(LocalTime) = 'T'
				ltLocalTime = LocalTime
			otherwise
				error 11
				return .NULL.
		endcase
		ltGMTTime = ltLocalTime + This.TimeZoneOffset
		return ltGMTTime
		
	ENDPROC

	PROCEDURE gmttime_access
		return This.ConvertLocalToGMT(datetime())
		
	ENDPROC

	PROCEDURE gmttime_assign
		* Throw a "property is read-only" error.
		
		lparameters tuValue
		error cnERR_PROPERTY_READ_ONLY, 'GMTTime'
		
	ENDPROC

	PROCEDURE Init
		local lcTimeZone, ;
			lnID, ;
			lnStandardOffset, ;
			lnDaylightOffset
		
		* Declare the time zone information API function and get the time zone
		* information.
		 
		#define TIME_ZONE_SIZE  172
		declare integer GetTimeZoneInformation in kernel32 ;
			string @lpTimeZoneInformation
		lcTimeZone = replicate(chr(0), TIME_ZONE_SIZE)
		lnID       = GetTimeZoneInformation(@lcTimeZone)
		
		* Determine the standard and daylight time offset.
		 
		lnStandardOffset = ctobin(substr(lcTimeZone,   1, 4), '4RS')
		lnDaylightOffset = ctobin(substr(lcTimeZone, 169, 4), '4RS')
		
		* Determine the total offset based on whether the computer is on daylight time
		* or not. Get the description for the time zone.
		 
		if lnID = 2  && daylight time
			This.TimeZoneDescription = strtran(strconv(substr(lcTimeZone, 89, 64), ;
				6), chr(0), '')
			This.TimeZoneOffset = (lnStandardOffset + lnDaylightOffset) * 60
		else   && standard time
			This.TimeZoneDescription = strtran(strconv(substr(lcTimeZone,  5, 64), ;
				6), chr(0), '')
			This.TimeZoneOffset = lnStandardOffset * 60
		endif lnID = 2
		
	ENDPROC

	PROCEDURE localtime_access
		return datetime()
		
	ENDPROC

	PROCEDURE localtime_assign
		* Throw a "property is read-only" error.
		
		lparameters tuValue
		error cnERR_PROPERTY_READ_ONLY, 'LocalTime'
		
	ENDPROC

	PROCEDURE timezonedescription_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tuValue
		if This.CalledFromThisClass()
			This.TimeZoneDescription = tuValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'TimeZoneDescription'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE timezoneoffset_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tuValue
		if This.CalledFromThisClass()
			This.TimeZoneOffset = tuValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'TimeZoneOffset'
		endif This.CalledFromThisClass()
		
	ENDPROC

ENDDEFINE
