*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS settings AS mybase OF "my.vcx" 		&& Provides application settings
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: add		&& Adds a new setting
		*m: exists		&& Returns .T. if the specified setting exists
		*m: load		&& Loads the settings from the specified file
		*m: save		&& Saves the settings to the specified file
		*p: osettings		&& A collection of settings
	*</DefinedPropArrayMethod>

	PROTECTED osettings
	*<PropValue>
		cnamespace = My.Settings
		Name = "settings"
		osettings = .NULL.
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="load" type="method" display="Load"/>
			<memberdata name="save" type="method" display="Save"/>
			<memberdata name="osettings" type="property" display="oSettings"/>
			<memberdata name="add" type="method" display="Add"/>
			<memberdata name="exists" type="method" display="Exists"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE add		&& Adds a new setting
		* Add a new setting to our collection and as a property.
		
		lparameters SettingName as String, Value as Variant
		local loException as Exception
		if vartype(SettingName) <> 'C' or empty(SettingName) or ;
			vartype(Value) = 'O'
			error cnERR_ARGUMENT_INVALID
		else
			try
				This.AddProperty(SettingName, Value)
				This.oSettings.Add(SettingName, SettingName)
			catch to loException when loException.ErrorNo = cnERR_KEY_EXISTS
				store Value to ('This.' + SettingName)
			catch to loException
				throw
			endtry
		endif vartype(SettingName) <> 'C' ...
		
	ENDPROC

	PROCEDURE Destroy
		* Nuke member objects.
		
		This.oSettings = .NULL.
		dodefault()
		
	ENDPROC

	PROCEDURE exists		&& Returns .T. if the specified setting exists
		* Return .T. if the specified setting exists.
		
		lparameters SettingName as String
		local llReturn
		if vartype(SettingName) <> 'C' or empty(SettingName)
			error cnERR_ARGUMENT_INVALID
			llReturn = .F.
		else
			llReturn = This.oSettings.GetKey(SettingName) > 0
		endif vartype(SettingName) <> 'C' ...
		return llReturn
		
	ENDPROC

	PROCEDURE Init
		* Create a collection of setting names.
		
		This.oSettings = newobject('MyCollection', 'My.vcx')
		dodefault()
		
	ENDPROC

	PROCEDURE load		&& Loads the settings from the specified file
		* Load the specified settings file.
		
		lparameters SettingsFile as String
		local loDOM, ;
			loNodes, ;
			loNode, ;
			llCast, ;
			lcName, ;
			lcType, ;
			loValue, ;
			lcValue, ;
			lnPos, ;
			lnDigits, ;
			lnDec, ;
			llReturn
		do case
		
		* We weren't passed a valid file name, so give an error and exit.
		
			case vartype(SettingsFile) <> 'C' or empty(SettingsFile)
				error cnERR_ARGUMENT_INVALID
			case not file(SettingsFile)
				error cnERR_FILE_NOT_FOUND, SettingsFile
			otherwise
		
		* Create an MSXML DOMDocument object and load the XML.
		
				try
					loDOM = createobject('MSXML2.DOMDocument.3.0')
					loDOM.async = .F.
					loDOM.preserveWhiteSpace = .T.
					loDOM.load(SettingsFile)
				catch to loException
					loDOM = .NULL.
				endtry
				do case
		
		* We couldn't create the object.
		
					case vartype(loDOM) <> 'O'
						error 'Could not create MSXML DOMDocument object'
		
		* The XML was loaded, so parse it into individual settings.
		
					case loDOM.parseError.errorCode = 0
						loNodes = loDOM.selectNodes('/SettingsFile/Settings/Setting')
						for each loNode in loNodes
							llCast  = .T.
							lcName  = loNode.getAttribute('Name')
							lcType  = loNode.getAttribute('Type')
							loValue = loNode.selectSingleNode('Value')
							lcValue = loValue.text
							do case
								case lcType = ccSTRING
									llCast  = .F.
									luValue = lcValue
								case lcType = ccINTEGER
									lcType = 'I'
								case lcType = ccBOOLEAN
									lcType = 'L'
								case lcType = ccDOUBLE
									lnPos    = at('.', lcValue)
									lnDigits = len(lcValue)
									lnDec    = iif(lnPos > 0, len(lcValue) - lnPos, 0)
									lcType   = 'N(' + transform(lnDigits) + ',' + ;
										transform(lnDec) + ')'
								case lcType = ccCURRENCY
									lcType = 'Y'
								case lcType = ccDATETIME
									llCast  = .F.
									luValue = ctot(lcValue)
							endcase
							try
								if llCast
									luValue = cast(lcValue as &lcType)
								endif llCast
								This.Add(lcName, luValue)
							catch to loException
								throw
							endtry
						next loNode
						llReturn = .T.
				endcase
		endcase
		return llReturn
		
	ENDPROC

	PROCEDURE save		&& Saves the settings to the specified file
		lparameters SettingsFile as String
		local loDOM, ;
			loInstruction, ;
			loRoot, ;
			loBlank, ;
			loProfiles, ;
			loSettings, ;
			lcName, ;
			luValue, ;
			lcType, ;
			loSetting, ;
			lcValue
		
		* We weren't passed a valid file name, so give an error and exit.
		
		if vartype(SettingsFile) <> 'C' or empty(SettingsFile)
			error cnERR_ARGUMENT_INVALID
		else
		
		* Create an MSXML DOMDocument object.
		
			try
				loDOM = createobject('MSXML2.DOMDocument.3.0')
			catch to loException
				loDOM = .NULL.
			endtry
			if vartype(loDOM) = 'O'
		
		* Create the root and other nodes.
		
				loDOM.preserveWhiteSpace = .T.
				loInstruction = loDOM.createProcessingInstruction('xml', ;
					'version="1.0" encoding="utf-8"')
				loDOM.appendChild(loInstruction)
				loRoot = loDOM.createElement('SettingsFile')
				loRoot.setAttribute('xmlns', ;
					'http://schemas.microsoft.com/VisualStudio/2004/01/settings')
				loRoot.setAttribute('CurrentProfile', '(Default)')
				loRoot.setAttribute('GeneratedClassNamespace', '')
				loRoot.setAttribute('GeneratedClassName', 'Settings')
				loDOM.appendChild(loRoot)
				loBlank = loDOM.createTextNode(chr(13) + chr(10) + chr(9))
				loRoot.appendChild(loBlank)
				loProfiles = loDOM.createElement('Profiles')
				loRoot.appendChild(loProfiles)
				loBlank = loDOM.createTextNode(chr(13) + chr(10) + chr(9))
				loRoot.appendChild(loBlank)
				loSettings = loDOM.createElement('Settings')
				loRoot.appendChild(loSettings)
				loBlank = loDOM.createTextNode(chr(13) + chr(10))
				loRoot.appendChild(loBlank)
		
		* Create nodes for each setting.
		
				for each lcName in This.oSettings
					luValue   = evaluate('This.' + lcName)
					lcType    = vartype(luValue)
					loSetting = loDOM.createElement('Setting')
					loSetting.setAttribute('Name', lcName)
					do case
						case lcType = 'C'
							lcType  = ccSTRING
							lcValue = luValue
						case lcType = 'N' and '.' $ transform(luValue)
							lcType  = ccDOUBLE
							lcValue = transform(luValue)
						case lcType = 'N'
							lcType  = ccINTEGER
							lcValue = transform(luValue)
						case lcType = 'L'
							lcType  = ccBOOLEAN
							lcValue = iif(luValue, 'True', 'False')
						case lcType = 'Y'
							lcType  = ccCURRENCY
							lcValue = transform(luValue)
						case lcType $ 'DT'
							lcType  = ccDATETIME
							lcValue = ttoc(luValue, 3)
					endcase
					loSetting.setAttribute('Type',  lcType)
					loSetting.setAttribute('Scope', 'User')
					loValue = loDOM.createElement('Value')
					loValue.setAttribute('Profile', '(Default)')
					loValue.text = lcValue
					loBlank = loDOM.createTextNode(chr(13) + chr(10) + chr(9) + ;
						chr(9) + chr(9))
					loSetting.appendChild(loBlank)
					loSetting.appendChild(loValue)
					loBlank = loDOM.createTextNode(chr(13) + chr(10) + chr(9) + chr(9))
					loSetting.appendChild(loBlank)
					loBlank = loDOM.createTextNode(chr(13) + chr(10) + chr(9) + chr(9))
					loSettings.appendChild(loBlank)
					loSettings.appendChild(loSetting)
				next lcName
		
		* Add some additional formatting.
		
				loBlank = loDOM.createTextNode(chr(13) + chr(10) + chr(9))
				loSettings.appendChild(loBlank)
		
		* Save the XML to the settings file.
		
				loDOM.Save(SettingsFile)
			endif vartype(loDOM) = 'O'
		endif vartype(SettingsFile) <> 'C' ...
		
	ENDPROC

ENDDEFINE
