*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS network AS mybase OF "my.vcx" 		&& Provides properties and methods dealing with networks
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: downloadfile		&& Downloads the specified file to the specified location
		*m: mapnetworkdrive		&& Maps to a network drive
		*m: removenetworkdrive		&& Removes a mapping for a network drive
		*p: owsh		&& A reference to the Windows Script Host object
	*</DefinedPropArrayMethod>

	PROTECTED owsh
	*<PropValue>
		cnamespace = My.Computer.Network
		Name = "network"
		owsh = .NULL.
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="mapnetworkdrive" type="method" display="MapNetworkDrive"/>
			<memberdata name="downloadfile" type="method" display="DownloadFile"/>
			<memberdata name="owsh" type="property" display="oWSH"/>
			<memberdata name="removenetworkdrive" type="method" display="RemoveNetworkDrive"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Destroy
		* Nuke all memebers.
		
		This.oWSH = .NULL.
		dodefault()
		
	ENDPROC

	PROCEDURE downloadfile		&& Downloads the specified file to the specified location
		* Download the specified file over the Internet.
		
		lparameters URL as String, ;
			Destination as String
		local lnResult
		if vartype(URL) <> 'C' or empty(URL) or ;
			vartype(Destination) <> 'C' or empty(Destination)
			error cnERR_ARGUMENT_INVALID
			lnResult = -1
		else
			declare long URLDownloadToFile in URLMON.DLL long, string, string, long, ;
				long
			lnResult = URLDownloadToFile(0, URL, Destination, 0, 0)
		endif vartype(URL) <> 'C' ...
		return lnResult
		
	ENDPROC

	PROCEDURE Init
		* Create an instance of the Windows Script Host.
		
		This.oWSH = createobject('WScript.Network')
		
	ENDPROC

	PROCEDURE mapnetworkdrive		&& Maps to a network drive
		* Map the specified UNC path to the specified drive.
		
		lparameters DriveLetter as String, ;
			UNCPath as String, ;
			ReconnectAtLogon as Logical, ;
			UserName as String, ;
			Password as String
		local lnResult
		do case
			case vartype(DriveLetter) <> 'C' or len(DriveLetter) <> 2 or ;
				not isalpha(left(DriveLetter, 1)) or right(DriveLetter, 1) <> ':' or ;
				vartype(UNCPath) <> 'C' or empty(UNCPath) or ;
				(pcount() >= 3 and vartype(ReconnectAtLogon) <> 'L') or ;
				(pcount() >= 4 and (vartype(UserName) <> 'C' or empty(UserName))) or ;
				(pcount() = 5 and (vartype(Password) <> 'C' or empty(Password)))
				error cnERR_ARGUMENT_INVALID
			case pcount() > 3
				lnResult = This.oWSH.MapNetworkDrive(DriveLetter, UNCPath, ;
					ReconnectAtLogon, UserName, Password)
			otherwise
				lnResult = This.oWSH.MapNetworkDrive(DriveLetter, UNCPath, ;
					ReconnectAtLogon)
		endcase
		return lnResult
		
	ENDPROC

	PROCEDURE removenetworkdrive		&& Removes a mapping for a network drive
		* Map the specified UNC path to the specified drive.
		
		lparameters DriveLetter as String, ;
			Force as Logical, ;
			UpdateUserProfile as Logical
		local lnResult
		if vartype(DriveLetter) <> 'C' or vartype(Force) <> 'L' or ;
			vartype(UpdateUserProfile) <> 'L'
			error cnERR_ARGUMENT_INVALID
		else
			lnResult = This.oWSH.RemoveNetworkDrive(DriveLetter, Force, ;
				UpdateUserProfile)
		endif vartype(DriveLetter) <> 'C' ...
		return lnResult
		
	ENDPROC

ENDDEFINE
