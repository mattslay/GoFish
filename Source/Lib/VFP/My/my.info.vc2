*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS info AS mybase OF "my.vcx" 		&& Contains application-specific properties
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: directorypath_access
		*m: directorypath_assign
		*m: getapplicationinformation		&& Gets information about the specified application
		*m: getcurrentapplicationinformation		&& Gets information about the current application
		*p: comments		&& The application comments
		*p: companyname		&& The company name
		*p: copyright		&& The copyright
		*p: description		&& The application description
		*p: directorypath		&& The directory the application is running from
		*p: internalname		&& The internal name of the application
		*p: language		&& The language
		*p: oleselfregister		&& .T. if the EXE is self-registering
		*p: originalfilename		&& The original file name
		*p: privatebuild		&& The private build
		*p: productname		&& The product name
		*p: productversion		&& The product version
		*p: specialbuild		&& The special build
		*p: trademarks		&& The trademarks
		*p: translationcode		&& The translation code
		*p: version		&& The application version number
	*</DefinedPropArrayMethod>

	*<PropValue>
		cnamespace = My.App.ApplicationInfo
		comments = 
		companyname = 
		copyright = 
		description = 
		directorypath = 
		internalname = 
		language = 
		Name = "info"
		oleselfregister = 
		originalfilename = 
		privatebuild = 
		productname = 
		productversion = 
		specialbuild = 
		trademarks = 
		translationcode = 
		version = 
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="getapplicationinformation" type="method" display="GetApplicationInformation"/>
			<memberdata name="getcurrentapplicationinformation" type="method" display="GetCurrentApplicationInformation"/>
			<memberdata name="comments" type="property" display="Comments"/>
			<memberdata name="companyname" type="property" display="CompanyName"/>
			<memberdata name="copyright" type="property" display="Copyright"/>
			<memberdata name="description" type="property" display="Description"/>
			<memberdata name="internalname" type="property" display="InternalName"/>
			<memberdata name="version" type="property" display="Version"/>
			<memberdata name="trademarks" type="property" display="Trademarks"/>
			<memberdata name="originalfilename" type="property" display="OriginalFileName"/>
			<memberdata name="privatebuild" type="property" display="PrivateBuild"/>
			<memberdata name="productversion" type="property" display="ProductVersion"/>
			<memberdata name="specialbuild" type="property" display="SpecialBuild"/>
			<memberdata name="oleselfregister" type="property" display="OLESelfRegister"/>
			<memberdata name="language" type="property" display="Language"/>
			<memberdata name="translationcode" type="property" display="TranslationCode"/>
			<memberdata name="productname" type="property" display="ProductName"/>
			<memberdata name="directorypath" type="property" display="DirectoryPath"/>
			<memberdata name="directorypath_access" type="property" display="DirectoryPath_Access"/>
			<memberdata name="directorypath_assign" type="property" display="DirectoryPath_Assign"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE directorypath_access
		local lcProgram, ;
			lcPath, ;
			loFSO, ;
			loFolder
		with This
			do case
		
		* We already have it.
		
				case not empty(.DirectoryPath)
		
		* We're running in development mode, so get the path of the running program.
		* Note this is returned in upper-case, so use the Scripting.FileSystemObject to
		* get the correct case.
		
				case version(2) = 2
					lcProgram = sys(16)
					lcPath    = justpath(lcProgram)
					if atc('PROCEDURE', lcPath) > 0
						lcPath = substr(lcPath, rat(':', lcPath) - 1)
					endif atc('PROCEDURE', lcPath) > 0
					loFSO          = createobject('Scripting.FileSystemObject')
					loFolder       = loFSO.GetFolder(addbs(lcPath))
					.DirectoryPath = loFolder.Path
		
		* We're running in the runtime.
		
				otherwise
					.DirectoryPath = addbs(justpath(_vfp.ServerName))
			endcase
		endwith
		return This.DirectoryPath
		
	ENDPROC

	PROCEDURE directorypath_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.DirectoryPath = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'DirectoryPath'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE getapplicationinformation		&& Gets information about the specified application
		lparameters EXEPath as String
		local laFileInfo[1], ;
			lnElements
		with This
		
		* Ensure a filename was specified and that the file exists.
		
			do case
				case vartype(EXEPath) <> 'C' or empty(EXEPath)
					error cnERR_ARGUMENT_INVALID
				case not file(EXEPath)
					error cnERR_FILE_NOT_FOUND
		
		* Get the version information.
		
				otherwise
					lnElements = agetfileversion(laFileInfo, EXEPath)
					if lnElements > 0
						.Comment          = laFileInfo[ 1]
						.CompanyName      = laFileInfo[ 2]
						.Description      = laFileInfo[ 3]
						.Version          = laFileInfo[ 4]
						.InternalName     = laFileInfo[ 5]
						.Copyright        = laFileInfo[ 6]
						.Trademarks       = laFileInfo[ 7]
						.OriginalFileName = laFileInfo[ 8]
						.PrivateBuild     = laFileInfo[ 9]
						.ProductName      = laFileInfo[10]
						.ProductVersion   = laFileInfo[11]
						.SpecialBuild     = laFileInfo[12]
						.OLESelfRegister  = not empty(laFileInfo[13])
						.Language         = laFileInfo[14]
						.TranslationCode  = laFileInfo[15]
					else
						store '' to .Comment, .CompanyName, .Description, .Version, ;
							.InternalName, .Copyright, .Trademarks, ;
							.OriginalFileName, .PrivateBuild, .ProductName, ;
							.ProductVersion, .SpecialBuild, .Language, .TranslationCode
						.OLESelfRegister = .F.
					endif lnElements > 0
			endcase
		endwith
		
	ENDPROC

	PROCEDURE getcurrentapplicationinformation		&& Gets information about the current application
		local lcEXE
		if version(2) = 2
			lcEXE = sys(16)
			if atc('PROCEDURE', lcEXE) > 0
				lcEXE = substr(lcEXE, rat(':', lcEXE) - 1)
			endif atc('PROCEDURE', lcEXE) > 0
		else
			lcEXE = _vfp.ServerName
		endif version(2) = 2
		This.GetApplicationInformation(lcEXE)
		
	ENDPROC

ENDDEFINE
