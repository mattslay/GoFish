*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS user AS mybase OF "my.vcx" 		&& Provides information about the current user
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: displayname_access
		*m: displayname_assign
		*m: getaduser		&& Returns an Active Directory user object for the current Windows user
		*m: userdomain_access
		*m: userdomain_assign
		*m: username_access
		*m: username_assign
		*p: displayname		&& The display name for the current user
		*p: oaduser		&& A reference to an Active Directory user object
		*p: owsh		&& A reference to a Windows Scripting Host object
		*p: userdomain		&& The domain for the current Windows user
		*p: username		&& The name of the current Windows user
	*</DefinedPropArrayMethod>

	PROTECTED oaduser,owsh
	*<PropValue>
		cnamespace = My.User
		displayname = 
		Name = "user"
		oaduser = .NULL.
		owsh = .NULL.
		userdomain = 
		username = 
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="warning" type="method" display="Warning"/>
			<memberdata name="ccaption" type="property" display="cCaption"/>
			<memberdata name="errormessage" type="property" display="ErrorMessage"/>
			<memberdata name="quietmode" type="property" display="QuietMode"/>
			<memberdata name="calledfromthisclass" type="method" display="CalledFromThisClass"/>
			<memberdata name="username" type="property" display="UserName"/>
			<memberdata name="username_access" type="property" display="UserName_Access"/>
			<memberdata name="username_assign" type="property" display="UserName_Assign"/>
			<memberdata name="owsh" type="property" display="oWSH"/>
			<memberdata name="userdomain" type="property" display="UserDomain"/>
			<memberdata name="userdomain_access" type="property" display="UserDomain_Access"/>
			<memberdata name="userdomain_assign" type="property" display="UserDomain_Assign"/>
			<memberdata name="displayname" type="property" display="DisplayName"/>
			<memberdata name="displayname_access" type="property" display="DisplayName_Access"/>
			<memberdata name="displayname_assign" type="property" display="DisplayName_Assign"/>
			<memberdata name="getaduser" type="method" display="GetADUser"/>
			<memberdata name="oaduser" type="property" display="oADUser"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Destroy
		* Nuke member objects.
		
		This.oWSH    = .NULL.
		This.oADUser = .NULL.
		dodefault()
		
	ENDPROC

	PROCEDURE displayname_access
		local lcReturn
		if vartype(This.oADUser) = 'O'
			lcReturn = This.oADUser.DisplayName
		else
			lcReturn = ''
		endif vartype(This.oADUser) = 'O'
		return lcReturn
		
	ENDPROC

	PROCEDURE displayname_assign
		* Throw a "property is read-only" error.
		
		lparameters tcValue
		error cnERR_PROPERTY_READ_ONLY, 'DisplayName'
		
	ENDPROC

	PROTECTED PROCEDURE getaduser		&& Returns an Active Directory user object for the current Windows user
		* This code was adapted from code posted by Sergey Berezniker on the Universal
		* Thread.
		
		local loNameTrans, ;
			lcDN, ;
			loADUser
		#define cnADS_NAME_INITTYPE_GC 3
		#define cnADS_NAME_TYPE_NT4    3
		#define cnADS_NAME_TYPE_1779   1
		try
			loNameTrans = createobject('NameTranslate')
			loNameTrans.Init(cnADS_NAME_INITTYPE_GC, '')
			loNameTrans.Set(cnADS_NAME_TYPE_NT4, This.UserDomain + '\' + This.UserName)
			lcDN     = loNameTrans.Get(cnADS_NAME_TYPE_1779)
			loADUser = getobject('LDAP://' + lcDN)
		catch to loException when loException.Errorno = 1426
			loADUser = .NULL.
		endtry
		return loADUser
		
	ENDPROC

	PROCEDURE Init
		* Create a Windows Script Host object and get an Active Directory user object
		* for the current Windows user.
		
		with This
			.oWSH    = createobject('WScript.Network')
			.oADUser = .GetADUser()
		endwith
		dodefault()
		
	ENDPROC

	PROCEDURE userdomain_access
		return This.oWSH.UserDomain
		
	ENDPROC

	PROCEDURE userdomain_assign
		* Throw a "property is read-only" error.
		
		lparameters tcValue
		error cnERR_PROPERTY_READ_ONLY, 'UserDomain'
		
	ENDPROC

	PROCEDURE username_access
		return This.oWSH.UserName
		
	ENDPROC

	PROCEDURE username_assign
		* Throw a "property is read-only" error.
		
		lparameters tcValue
		error cnERR_PROPERTY_READ_ONLY, 'UserName'
		
	ENDPROC

ENDDEFINE
