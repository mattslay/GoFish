*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS mybuilderform AS form 		&& The builder for My namespace classes
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpMembers" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oImageList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNameSpace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNameSpace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDescription" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtTip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMembers" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNameSpaceDescrip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtNameSpaceDescrip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrBuilder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtScript" UniqueID="" Timestamp="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: getobjectreference		&& Puts a reference to the object being edited into oObject
		*m: loadtree		&& Loads the TreeView with the members for the object
		*m: openmytable		&& Opens the My table
		*m: save		&& Saves the changes the user made
		*p: cdescription		&& The description for the namespace
		*p: cnamespace		&& The namespace for the class
		*p: lautorelease		&& .T. if we're supposed to auto-release
		*p: lautoshow		&& .T. if we're supposed to be displayed
		*p: oobject		&& A reference to the object being edited
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		AllowOutput = .F.
		AutoCenter = .T.
		BindControls = .F.
		Caption = "My Registration Editor"
		cdescription = 
		cnamespace = 
		DataSession = 2
		DoCreate = .T.
		FontName = "Tahoma"
		FontSize = 8
		Height = 514
		lautorelease = .F.
		lautoshow = .T.
		MaxButton = .F.
		MinButton = .F.
		MinHeight = 450
		MinWidth = 350
		Name = "mybuilderform"
		oobject = .NULL.
		ShowTips = .T.
		Width = 514
		WindowType = 1
		_memberdata = <VFPData>
			<memberdata name="loadtree" type="method" display="LoadTree"/>
			<memberdata name="oobject" type="property" display="oObject"/>
			<memberdata name="getobjectreference" type="method" display="GetObjectReference"/>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="save" type="method" display="Save"/>
			<memberdata name="cdescription" type="property" display="cDescription"/>
			<memberdata name="lautoshow" type="property" display="lAutoShow"/>
			<memberdata name="lautorelease" type="property" display="lAutoRelease"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Anchor = 12, ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 430, ;
		Name = "cmdCancel", ;
		TabIndex = 15, ;
		Top = 484, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Anchor = 12, ;
		Caption = "OK", ;
		Default = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 350, ;
		Name = "cmdOK", ;
		TabIndex = 14, ;
		Top = 484, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'edtDescription' AS editbox WITH ;
		Anchor = 40, ;
		ControlSource = "__MyCursor.Descrip", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 55, ;
		Left = 260, ;
		Name = "edtDescription", ;
		TabIndex = 9, ;
		ToolTipText = "Specify the description for this member", ;
		Top = 125, ;
		Width = 235
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'edtList' AS editbox WITH ;
		Anchor = 105, ;
		ControlSource = "__MyCursor.List", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 85, ;
		Left = 260, ;
		Name = "edtList", ;
		TabIndex = 13, ;
		ToolTipText = "If the method accepts an enumerated parameter, specify the values and description for the values as comma-delimited pairs on individual lines", ;
		Top = 275, ;
		Width = 235
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'edtNameSpaceDescrip' AS editbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.cDescription", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 50, ;
		Left = 76, ;
		Name = "edtNameSpaceDescrip", ;
		TabIndex = 4, ;
		Top = 30, ;
		Width = 430
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'edtScript' AS editbox WITH ;
		Anchor = 120, ;
		ControlSource = "__MyCursor.Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 85, ;
		Left = 260, ;
		Name = "edtScript", ;
		TabIndex = 13, ;
		ToolTipText = "Specify code to execute when IntelliSense fires for this member", ;
		Top = 380, ;
		Width = 235
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'edtTip' AS editbox WITH ;
		Anchor = 40, ;
		ControlSource = "__MyCursor.Tip", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 55, ;
		Left = 260, ;
		Name = "edtTip", ;
		TabIndex = 11, ;
		ToolTipText = "Specify the signature for this method (e.g. MethodName(Parameter1 as String) as Boolean)", ;
		Top = 200, ;
		Width = 235
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'lblDescription' AS label WITH ;
		Anchor = 40, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Description", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 260, ;
		Name = "lblDescription", ;
		TabIndex = 8, ;
		ToolTipText = "Specify the description for this member", ;
		Top = 110, ;
		Width = 55
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblList' AS label WITH ;
		Anchor = 40, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Enumerated Parameter List", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 260, ;
		Name = "lblList", ;
		TabIndex = 12, ;
		ToolTipText = "If the method accepts an enumerated parameter, specify the values and description for the values as comma-delimited pairs on individial lines", ;
		Top = 260, ;
		Width = 132
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblMembers' AS label WITH ;
		AutoSize = .T., ;
		Caption = " Members ", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 21, ;
		Name = "lblMembers", ;
		Style = 3, ;
		TabIndex = 5, ;
		Top = 87, ;
		Width = 51
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblNameSpace' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Namespace", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 7, ;
		Name = "lblNameSpace", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 57
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblNameSpaceDescrip' AS label WITH ;
		Anchor = 40, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Description", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 6, ;
		Name = "lblNameSpaceDescrip", ;
		TabIndex = 3, ;
		Top = 30, ;
		Width = 55
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblScript' AS label WITH ;
		Anchor = 104, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Script", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 260, ;
		Name = "lblScript", ;
		TabIndex = 12, ;
		ToolTipText = "If the method accepts an enumerated parameter, specify the values and description for the values as comma-delimited pairs on individial lines", ;
		Top = 365, ;
		Width = 29
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblTip' AS label WITH ;
		Anchor = 40, ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Method Signature", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 260, ;
		Name = "lblTip", ;
		TabIndex = 10, ;
		ToolTipText = "Specify the signature for this method (e.g. MethodName(Parameter1 as String) as Boolean)", ;
		Top = 185, ;
		Width = 87
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oImageList' AS olecontrol WITH ;
		Height = 100, ;
		Left = 211, ;
		Name = "oImageList", ;
		Top = 109, ;
		Width = 100
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBwDWVJjMgBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAIAAAD+/////vjfyQskYXREbFqAMDwKDYoIUM0EggAAADtAwAA7QMAAIB+4eYAAAYAIAAAAAAAAADAwMAA//8AAAHvzasAAAUAXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAD/////BQAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Anchor = 135, ;
		Height = 355, ;
		Left = 15, ;
		Name = "oTree", ;
		TabIndex = 6, ;
		Top = 110, ;
		Width = 231
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHD7DGVJjMgBAwAAAEACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAO8AAAAAAAAABwAAAAIAAAD+////BAAAAAUAAAAGAAAA/v///wgAAAD+//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////+2kEHHiYXREbFqAMDwKDYoIUM0EggAAADgFwAAsSQAALE8wWoBAAYAIgAAAPwANgDtAwAASQBQAFEsvAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTFvAGsAXABEAGEAdABhAFwAYQBkAGQAcgBlAHMAcwAgAGIAbwABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwBAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAABDQAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAA0AAABNb3VzZVBvaW50ZXIACQAAAEkKAAAAAAAAAA4AAABQYXRoU2VwYXJhdG9yAAoAAABIAAAAAAEAAABcDAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAsAAABDaGVja2JveGVzAAUAAABMAQAAAAD+kQAAAAAAAPATAQAAAAAAAAAFACAuvAAGAGMAAAAAAAUAAIBk6RIAAQAAAFwAH97svQEABQCp6RIAA1LjC5GPzhGd4wCqAEu4UQEAAACQAURCAQAGVGFob21hhmj3AwAo5TMFoKvCAICAAACAgAAAAAAAAMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAAAAAAD///8AAAAAAP///wD///8AAAAAAP///wD///8A////AP///wD///8A////AP///wAAAAAAAP//AAD//wAAgIAAAAAAAP///wCAgIAAgICAAICAgAAAAAAAwMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AAAAAAICAAAAAAAAA////AP///wAAAAAA////AP///wD///8A////AP///wD///8A////AP///wAAAAAAAP//AAD//wAAgIAAAAAAAP///wCAgIAAgICAAAAAAADAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAA////AAAAAACAgAAAgIAAAAAAAAD///8A////AP///wD///8A////AP///wD///8A////AAAAAAAA//8AAP//AACAgAAAAAAA////AP///wCAgIAAAAAAAMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAAAAAAD///8AAAAAAP///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" />

	ADD OBJECT 'shpMembers' AS shape WITH ;
		Anchor = 15, ;
		BackStyle = 0, ;
		Height = 381, ;
		Left = 6, ;
		Name = "shpMembers", ;
		Style = 3, ;
		Top = 94, ;
		Width = 500
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'tmrBuilder' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 1000, ;
		Left = 225, ;
		Name = "tmrBuilder", ;
		Top = 155, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />

	ADD OBJECT 'txtNameSpace' AS textbox WITH ;
		Anchor = 10, ;
		ControlSource = "Thisform.cNameSpace", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Format = "T", ;
		Height = 23, ;
		Left = 77, ;
		Name = "txtNameSpace", ;
		TabIndex = 2, ;
		Top = 6, ;
		Width = 430
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Destroy
		* Nuke member objects and close cursors.
		
		This.oObject = .NULL.
		use in select('__MY')
		use in select('__MYCURSOR')
		
	ENDPROC

	PROTECTED PROCEDURE getobjectreference		&& Puts a reference to the object being edited into oObject
		local laObjects[1], ;
			lnObjects
		lnObjects = aselobj(laObjects)
		if lnObjects = 0
			lnObjects = aselobj(laObjects, 3)
		endif lnObjects = 0
		if lnObjects > 0
			This.oObject = laObjects[1]
			This.tmrBuilder.Enabled = .T.
		endif lnObjects > 0
		return vartype(This.oObject) = 'O'
		
	ENDPROC

	PROCEDURE Init
		* Turn on debugging. Do this before declaring variables since that seems to
		* mess them up.
		
		sys(2030, 1)
		local llError, ;
			lnLen, ;
			lcPath, ;
			llReturn
		with This
		
		* Get a reference to the selected object and open the My table.
		
			do case
				case not .GetObjectReference()
					messagebox(ccERR_NO_OBJECT_SELECTED_LOC, MB_ICONEXCLAMATION, ;
						.Caption)
					llError = .T.
				case .OpenMyTable() 
		
		* If the object has a cNameSpace property, use it. Otherwise, assume the
		* namespace is "My." plus the class name.
		
					if pemstatus(.oObject, 'cNameSpace', 5) and ;
						not empty(.oObject.cNameSpace)
						.cNameSpace = .oObject.cNameSpace
					else
						.cNameSpace = 'My.' + proper(.oObject.Class)
					endif pemstatus(.oObject, 'cNameSpace', 5) ...
		
		* Fill a cursor with any records already registered.
		
					lnLen = len(.cNameSpace) + 2
					select * from __MY ;
						where upper(MEMBER) = upper(.cNameSpace) and ;
							at('.', alltrim(substr(MEMBER, lnLen))) = 0 and ;
							(upper(MEMBER) = upper(.cNameSpace) + ' ' or ;
								TYPE <> 'C') and ;
							not deleted() ;
						into cursor __MYCURSOR readwrite
					index on upper(MEMBER) tag MEMBER
		
		* Add a record for the class if there isn't one.
		
					locate for TYPE = 'C'
					if found()
						.cDescription = DESCRIP
					else
						lcPath = sys(2014, sys(1271, .oObject), .ClassLibrary)
						insert into __MYCURSOR (MEMBER, TYPE, CLASS, LIBRARY) ;
							values (.cNameSpace, 'C', .oObject.Class, lcPath)
					endif found()
		
		* Load the TreeView, select the first node, and turn on data binding.
		
					.LoadTree()
					.oTree.NodeClick(.oTree.Nodes(1))
					.BindControls = .T.
				otherwise
					messagebox(ccERR_COULD_NOT_OPEN_MY_LOC, MB_ICONEXCLAMATION, ;
						.Caption)
					llError = .T.
			endcase
		endwith
		
		* If we have a problem, bug out now.
		
		llReturn = .T.
		do case
			case not llError
			case program(program(-1) - 1) = 'DOBUILDER'
				This.lAutoShow    = .F.
				This.lAutoRelease = .T.
			otherwise
				llReturn = .F.
		endcase
		return llReturn
		
	ENDPROC

	PROCEDURE Load
		* Set up the environment.
		
		set ansi       off
		set deleted    on
		set exact      off
		set exclusive  off
		set multilocks on
		set near       off
		set safety     off
		set talk       off
		set unique     off
		
	ENDPROC

	PROTECTED PROCEDURE loadtree		&& Loads the TreeView with the members for the object
		* Add records for public properties and methods to the My table.
		
		local loNode, ;
			lcMemberData, ;
			laLines[1], ;
			lnLines, ;
			lnI, ;
			lcLine, ;
			lnPos, ;
			lcMember, ;
			lcDescription, ;
			laComments[1], ;
			laMembers[1], ;
			lnMembers, ;
			lnLine, ;
			lcMetaData, ;
			lcSignature, ;
			lcNameSpace
		
		* Load the images for the ImageList control. 
		
		with This.oImageList
			.ImageHeight = 16
			.ImageWidth  = 16
			.ListImages.Add(1, 'Method', ;
				loadpicture(home() + 'ffc\graphics\method.bmp'))
			.ListImages.Add(2, 'Property', ;
				loadpicture(home() + 'ffc\graphics\propty.bmp'))
		endwith
		
		* Add "Methods" and "Properties" root nodes.
		
		with This.oTree
			.Object.ImageList = This.oImageList
			loNode = .Nodes.Add(, 1, '__RootMethods', 'Methods', 'Method')
			loNode.Expanded = .T.
			loNode.Sorted   = .T.
			loNode = .Nodes.Add(, 1, '__RootProperties', 'Properties', 'Property')
			loNode.Expanded = .T.
			loNode.Sorted   = .T.
		endwith
		with This.oObject
		
		* Get any MemberData for the object.
		
			if pemstatus(This.oObject, '_MemberData', 5)
				lcMemberData = ._MemberData
			else
				lcMemberData = ''
			endif pemstatus(This.oObject, '_MemberData', 5)
		
		* Open the FOXCODE table so we can look for global MemberData.
		
			try
				use (_foxcode) again shared in 0 alias FOXCODE
			catch
			endtry
		
		* Open the VCX and read descriptions.
		
			select 0
			try
				use (sys(1271, This.oObject)) again shared noupdate alias __VCX
			catch
			endtry
			if used('__VCX')
				locate for PLATFORM = 'WINDOWS' and OBJNAME = lower(.Class)
				lnLines = alines(laLines, RESERVED3)
				This.cDescription = iif(empty(This.cDescription), RESERVED7, ;
					This.cDescription)
				dimension laComments[lnLines, 2]
				use
				for lnI = 1 to lnLines
					lcLine = laLines[lnI]
					if left(lcLine, 1) = '*'
						lcLine = substr(lcLine, 2)
					endif left(lcLine, 1) = '*'
					lnPos              = at(' ', lcLine)
					lcMember           = left(lcLine, lnPos - 1)
					lcDescription      = substr(lcLine, lnPos + 1)
					laComments[lnI, 1] = lcMember
					laComments[lnI, 2] = lcDescription
				next lnI
			else
				laComments = ''
			endif used('__VCX')
		
		* Get a list of public user-defined members and go through each of them.
		
			lnMembers = amembers(laMembers, This.oObject, 1, 'GUC+')
			for lnI = 1 to lnMembers
				lcMember = laMembers[lnI, 1]
		
		* Get the description for the member.
		
				lnLine = ascan(laComments, lcMember, -1, -1, 1, 15)
				if lnLine > 0
					lcDescription = laComments[lnLine, 2]
				else
					lcDescription = ''
				endif lnLine > 0
		
		* If we have MemberData for this member, get the display name since AMEMBERS()
		* gives names in upper-case.
		
				lcMetaData = strextract(lcMemberData, 'name="' + lower(lcMember) + ;
					'"', '/>')
				do case
					case not empty(lcMetaData)
						lcMember = evl(strextract(lcMetaData, 'display="', '"'), ;
							lcMember)
					case used('FOXCODE')
						lnSelect = select()
						select FOXCODE
						locate for TYPE = 'E' and upper(ABBREV) = lcMember
						if found()
							lcMember = evl(strextract(TIP, 'display="', '"'), ;
								lcMember)
						endif found()
						select (lnSelect)
				endcase
				do case
		
		* If this is a method (we'll ignore certain methods that are public only
		* because we need to call them and Access and Assign methods), create the
		* signature for it by reading the code in the method. Then add it to the
		* TreeView.
		
					case laMembers[lnI, 2] = 'Method' and ;
						not inlist(right(upper(lcMember), 7), '_ACCESS', '_ASSIGN')
						lcSignature = lcMember + '('
						lcCode      = .ReadMethod(lcMember)
						alines(laCode, lcCode)
						lnLine = ascan(laCode, 'lpara', -1, -1, 1, 9)
						do while lnLine > 0
							lcLine = laCode[lnLine]
							if left(lower(lcLine), 5) = 'lpara'
								lcLine = substr(lcLine, at(' ', lcLine) + 1)
							endif left(lower(lcLine), 5) = 'lpara'
							lcLine      = alltrim(lcLine, 1, ' ', chr(9))
							lcSignature = lcSignature + lcLine
							if right(alltrim(lcLine, 1, ' ', chr(9)), 1) = ';'
								lcSignature = alltrim(left(lcSignature, ;
									len(lcSignature) - 1)) + ' '
								lnLine      = lnLine + 1
							else
								lnLine = 0
							endif right(alltrim(lcLine, 1, ' ', chr(9)), 1) = ';'
						enddo while lnLine > 0
						lcSignature = lcSignature + ')'
						lcNameSpace = This.cNameSpace + '.' + lcMember
						loNode      = This.oTree.Nodes.Add('__RootMethods', 4, ;
							lcMember, lcMember, 'Method')
						loNode.Checked = .T.
						if not seek(padr(upper(lcNameSpace), len(__MY.MEMBER)), ;
							'__MYCURSOR')
							insert into __MYCURSOR ;
									(MEMBER, ;
									TYPE) ;
								values ;
									(lcNameSpace, ;
									'M')
						endif not seek(padr(upper(lcNameSpace) ...
						if empty(__MYCURSOR.TIP)
							replace TIP with lcSignature in __MYCURSOR
						endif empty(__MYCURSOR.TIP)
						if empty(__MYCURSOR.DESCRIP)
							replace DESCRIP with lcDescription in __MYCURSOR
						endif empty(__MYCURSOR.DESCRIP)
		
		* If this is a property (we'll ignore certain properties that are public only
		* because we need to access them), add or update a record for it in the My
		* table.
		
					case laMembers[lnI, 2] = 'Property' and ;
						not inlist(upper(lcMember), 'CNAMESPACE', '_MEMBERDATA', ;
						'BUILDER', 'CCAPTION')
						lcNameSpace = This.cNameSpace + '.' + lcMember
						loNode      = This.oTree.Nodes.Add('__RootProperties', 4, ;
							lcMember, lcMember, 'Property')
						loNode.Checked = .T.
						if not seek(padr(upper(lcNameSpace), len(__MY.MEMBER)), ;
							'__MYCURSOR')
							insert into __MYCURSOR ;
									(MEMBER, ;
									TYPE) ;
								values ;
									(lcNameSpace, ;
									'P')
						endif not seek(padr(upper(lcNameSpace) ...
						if empty(__MYCURSOR.DESCRIP)
							replace DESCRIP with lcDescription in __MYCURSOR
						endif empty(__MYCURSOR.DESCRIP)
				endcase
			next lnI
		
		* Close the FOXCODE table.
		
			use in select('FOXCODE')
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE openmytable		&& Opens the My table
		local lcDir, ;
			lcTable, ;
			llReturn
		lcDir   = sys(16)
		lcDir   = addbs(justpath(substr(lcDir, at(' ', lcDir, 2) + 1)))
		lcTable = lcDir + 'my.dbf'
		if used('__MY')
			llReturn = .T.
		else
			try
				use (lcTable) again shared order MEMBER alias __MY in 0
				llReturn = .T.
			catch to loException
				llReturn = .F.
			endtry
		endif used('__MY')
		return llReturn
		
	ENDPROC

	PROCEDURE Refresh
		* Enable or disable the controls appropriately.
		
		with This
			do case
				case eof('__MYCURSOR')
					store .F. to .lblDescription.Enabled, .edtDescription.Enabled, ;
						.lblTip.Enabled, .edtTip.Enabled, ;
						.lblList.Enabled, .edtList.Enabled, ;
						.lblScript.Enabled, .edtScript.Enabled
				case __MYCURSOR.TYPE = 'P'
					store .T. to .lblDescription.Enabled, .edtDescription.Enabled, ;
						.lblScript.Enabled, .edtScript.Enabled
					store .F. to .lblTip.Enabled, .edtTip.Enabled, ;
						.lblList.Enabled, .edtList.Enabled
				otherwise
					store .T. to .lblDescription.Enabled, .edtDescription.Enabled, ;
						.lblTip.Enabled, .edtTip.Enabled, ;
						.lblList.Enabled, .edtList.Enabled, ;
						.lblScript.Enabled, .edtScript.Enabled
			endcase
		endwith
		
	ENDPROC

	PROCEDURE save		&& Saves the changes the user made
		* Save the changes.
		
		local loData, ;
			lcMember, ;
			loNode, ;
			llSave, ;
			llExists, ;
			lnSelect, ;
			lcAlias, ;
			lcType
		with This
		
		* Save the namespace if the class has a property for it.
		
			if pemstatus(.oObject, 'cNameSpace', 5) and ;
				.oObject.cNameSpace <> alltrim(.cNameSpace)
				.oObject.cNameSpace = alltrim(.cNameSpace)
			endif pemstatus(.oObject, 'cNameSpace', 5) ...
		
		* Save the member information.
		
			select __MYCURSOR
			set order to
			scan
				scatter memo name loData
				if TYPE <> 'C'
					lcMember = alltrim(substr(MEMBER, rat('.', MEMBER) + 1))
					if type('.oTree.Nodes(lcMember)') = 'O'
						loNode = .oTree.Nodes(lcMember)
						llSave = loNode.Checked
					else
						llSave = .F.
					endif type('.oTree.Nodes(lcMember)') = 'O'
				else
					llSave = .T.
					loData.Descrip = .cDescription
				endif TYPE <> 'C'
				llExists = seek(upper(loData.Member), '__MY')
				do case
					case not llExists and llSave
						insert into __MY from name loData
					case llExists and not llSave
						delete in __MY
					case llExists and llSave
						select __MY
						gather memo name loData
						select __MYCURSOR
				endcase
			endscan
		
		*** NEED TO REMOVE RECORDS IF RENAMED NAMESPACE
		
		* If this object isn't in the My namespace, add the necessary record to the
		* IntelliSense table.
		
			if upper(left(.cNameSpace, 3)) <> 'MY.'
				lnSelect = select()
				select 0
				try
					use (_foxcode) again shared
					lcAlias = alias()
				catch
				endtry
				if not empty(lcAlias)
		
		* Add the TYPE record if necessary.
		
					lcType = .cNameSpace
					locate for TYPE = 'T' and ;
						upper(ABBREV) = padr(upper(lcType), len(ABBREV)) and ;
						not deleted()
					if not found()
						insert into (lcAlias) ;
								(TYPE, ;
								ABBREV, ;
								CMD, ;
								DATA) ;
							values ;
								('T', ;
								lcType, ;
								'{MyScript}', ;
								lcType)
					endif not found()
		
		* Clean up and exit.
		
					use in (lcAlias)
				endif not empty(lcAlias)
				select (lnSelect)
			endif upper(left(.cNameSpace, 3)) <> 'MY.'
		endwith
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		Thisform.Release()
		
	ENDPROC

	PROCEDURE cmdOK.Click
		Thisform.Save()
		Thisform.Release()
		
	ENDPROC

	PROCEDURE oTree.KeyPress
		lparameters tnKeyASCII
		if tnKeyASCII = 27
			Thisform.Release()
		endif tnKeyASCII = 27
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		lparameters toNode
		= seek(upper(alltrim(Thisform.cNameSpace) + '.' + toNode.Key), '__MYCURSOR')
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE tmrBuilder.Timer
		* Close the builder if the class was closed.
		
		if vartype(Thisform.oObject) <> 'O'
			Thisform.Release()
		endif vartype(Thisform.oObject) <> 'O'
		
	ENDPROC

	PROCEDURE txtNameSpace.GotFocus
		This.Tag = Thisform.cNameSpace
		
	ENDPROC

	PROCEDURE txtNameSpace.Valid
		local loObject, ;
			lcNameSpace, ;
			llValid, ;
			lnI, ;
			lcChar
		
		* If the Valid method fired because the user clicked on the Cancel button or
		* if we're closing the form, don't bother doing the rest of the validation.
		
		loObject = sys(1270)
		if (type('loObject.Cancel') = 'L' and loObject.Cancel) or ;
			(type('Thisform.ReleaseType') = 'N' and Thisform.ReleaseType > 0)
			return .T.
		endif (type('loObject.Cancel') = 'L' ...
		
		* Don't allow illegal characters. This should be rewritten to use a regular
		* expression; for now, it's a brute force method.
		
		lcNameSpace = alltrim(This.Value)
		llValid     = .T.
		for lnI = 1 to len(lcNameSpace)
			lcChar = substr(lcNameSpace, lnI, 1)
			do case
		
		* The namespace can only consist of letters, digits, underscores, and periods.
		
				case not isalpha(lcChar) and not isdigit(lcChar) and not lcChar $ '_.'
					messagebox(ccERR_INVALID_CHAR_IN_NAMESPACE_LOC, ;
						MB_ICONEXCLAMATION, Thisform.Caption)
					llValid = .F.
					exit
		
		* The first character must be a letter.
		
				case not isalpha(lcChar) and lnI = 1
					messagebox(ccERR_FIRST_LETTER_LOC, MB_ICONEXCLAMATION, ;
						Thisform.Caption)
					llValid = .F.
					exit
		
		* The first namespace must be more than one letter long to prevent VFP from
		* thinking it's a workarea alias.
		
				case lcChar $ '_.' and lnI < 3
					messagebox(ccERR_NAMESPACE_TOO_SHORT_LOC, MB_ICONEXCLAMATION, ;
						Thisform.Caption)
					llValid = .F.
					exit
			endcase
		next lnI
		
		* Rename all records if the namespace was changed.
		
		if llValid and not lcNameSpace == This.Tag
			select __MYCURSOR
			replace all MEMBER with strtran(MEMBER, This.Tag, lcNameSpace)
		endif llValid ...
		return llValid
		
	ENDPROC

ENDDEFINE
