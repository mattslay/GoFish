*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS specialdirectories AS mybase OF "my.vcx" 		&& Provides the paths to "special" Windows folders for the current user
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: desktop_access
		*m: desktop_assign
		*m: favorites_access
		*m: favorites_assign
		*m: mydocuments_access
		*m: mydocuments_assign
		*m: nethood_access
		*m: nethood_assign
		*m: printhood_access
		*m: printhood_assign
		*m: programs_access
		*m: programs_assign
		*m: startmenu_access
		*m: startmenu_assign
		*m: temp_access
		*m: temp_assign
		*p: desktop		&& The current user's Desktop folder
		*p: favorites		&& The current user's Favorites folder
		*p: mydocuments		&& The current user's MyDocuments folder
		*p: nethood		&& The current user's Network Neighbourhood folder
		*p: owsh		&& A reference to a Windows Scripting Host object
		*p: printhood		&& The current user's Printer Neighbourhood folder
		*p: programs		&& The current user's Programs folder
		*p: startmenu		&& The current user's StartMenu folder
		*p: temp		&& The current user's temporary folder
	*</DefinedPropArrayMethod>

	PROTECTED owsh
	*<PropValue>
		cnamespace = My.Computer.FileSystem.SpecialFolders
		desktop = 
		favorites = 
		mydocuments = 
		Name = "specialdirectories"
		nethood = 
		owsh = .NULL.
		printhood = 
		programs = 
		startmenu = 
		temp = 
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="desktop" type="property" display="Desktop"/>
			<memberdata name="desktop_access" type="property" display="Desktop_Access"/>
			<memberdata name="desktop_assign" type="property" display="Desktop_Assign"/>
			<memberdata name="favorites" type="property" display="Favorites"/>
			<memberdata name="favorites_access" type="property" display="Favorites_Access"/>
			<memberdata name="favorites_assign" type="property" display="Favorites_Assign"/>
			<memberdata name="mydocuments" type="property" display="MyDocuments"/>
			<memberdata name="mydocuments_access" type="property" display="MyDocuments_Access"/>
			<memberdata name="mydocuments_assign" type="property" display="MyDocuments_Assign"/>
			<memberdata name="nethood" type="property" display="NetHood"/>
			<memberdata name="nethood_access" type="property" display="NetHood_Access"/>
			<memberdata name="nethood_assign" type="property" display="NetHood_Assign"/>
			<memberdata name="printhood" type="property" display="PrintHood"/>
			<memberdata name="printhood_access" type="property" display="PrintHood_Access"/>
			<memberdata name="printhood_assign" type="property" display="PrintHood_Assign"/>
			<memberdata name="programs" type="property" display="Programs"/>
			<memberdata name="programs_access" type="property" display="Programs_Access"/>
			<memberdata name="programs_assign" type="property" display="Programs_Assign"/>
			<memberdata name="startmenu" type="property" display="StartMenu"/>
			<memberdata name="startmenu_access" type="property" display="StartMenu_Access"/>
			<memberdata name="startmenu_assign" type="property" display="StartMenu_Assign"/>
			<memberdata name="temp" type="property" display="Temp"/>
			<memberdata name="temp_access" type="property" display="Temp_Access"/>
			<memberdata name="temp_assign" type="property" display="Temp_Assign"/>
			<memberdata name="owsh" type="property" display="oWSH"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE desktop_access
		with This
			if empty(.Desktop)
				.Desktop = .oWSH.SpecialFolders('Desktop')
			endif empty(.Desktop)
		endwith
		return This.Desktop
		
	ENDPROC

	PROCEDURE desktop_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.Desktop = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'Desktop'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE Destroy
		* Nuke member objects.
		
		This.oWSH = .NULL.
		
	ENDPROC

	PROCEDURE favorites_access
		with This
			if empty(.Favorites)
				.Favorites = .oWSH.SpecialFolders('Favorites')
			endif empty(.Favorites)
		endwith
		return This.Favorites
		
	ENDPROC

	PROCEDURE favorites_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.Favorites = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'Favorites'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE Init
		* Create instances of the Windows Script Host and File System Object.
		
		This.oWSH = createobject('WScript.Shell')
		dodefault()
		
	ENDPROC

	PROCEDURE mydocuments_access
		with This
			if empty(.MyDocuments)
				.MyDocuments = .oWSH.SpecialFolders('MyDocuments')
			endif empty(.MyDocuments)
		endwith
		return This.MyDocuments
		
	ENDPROC

	PROCEDURE mydocuments_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.MyDocuments = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'MyDocuments'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE nethood_access
		with This
			if empty(.NetHood)
				.NetHood = .oWSH.SpecialFolders('NetHood')
			endif empty(.NetHood)
		endwith
		return This.NetHood
		
	ENDPROC

	PROCEDURE nethood_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.NetHood = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'NetHood'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE printhood_access
		with This
			if empty(.PrintHood)
				.PrintHood = .oWSH.SpecialFolders('PrintHood')
			endif empty(.PrintHood)
		endwith
		return This.PrintHood
		
	ENDPROC

	PROCEDURE printhood_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.PrintHood = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'PrintHood'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE programs_access
		with This
			if empty(.Programs)
				.Programs = .oWSH.SpecialFolders('Programs')
			endif empty(.Programs)
		endwith
		return This.Programs
		
	ENDPROC

	PROCEDURE programs_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.Programs = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'Programs'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE startmenu_access
		with This
			if empty(.StartMenu)
				.StartMenu = .oWSH.SpecialFolders('StartMenu')
			endif empty(.StartMenu)
		endwith
		return This.StartMenu
		
	ENDPROC

	PROCEDURE startmenu_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.StartMenu = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'StartMenu'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE temp_access
		local lcPath, ;
			lnLength, ;
			lcBuffer
		with This
			if empty(.Temp)
				declare integer GetLongPathName in Win32API ;
					string @lpszShortPath, string @lpszLongPath, integer cchBuffer
				lcPath   = sys(2023) + ccNULL
				lnLength = 260
				lcBuffer = space(lnLength)
				GetLongPathName(@lcPath, @lcBuffer, lnLength)
				.Temp = left(lcBuffer, at(ccNULL, lcBuffer) - 1)
			endif empty(.Temp)
		endwith
		return This.Temp
		
	ENDPROC

	PROCEDURE temp_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tcValue
		if This.CalledFromThisClass()
			This.Temp = tcValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'Temp'
		endif This.CalledFromThisClass()
		
	ENDPROC

ENDDEFINE
