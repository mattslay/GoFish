*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="my.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS printer AS mybase OF "my.vcx" 		&& Provides information about printers
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "myconstants.h"
	*<DefinedPropArrayMethod>
		*m: availableprinters_access
		*m: availableprinters_assign
		*m: defaultvfpprinter_access
		*m: defaultvfpprinter_assign
		*m: defaultwindowsprinter_access
		*m: defaultwindowsprinter_assign
		*m: pagesetup		&& Displays the Page Setup dialog
		*p: availableprinters		&& A collection of objects containing information about the available printers
		*p: defaultvfpprinter		&& The name of the default VFP printer
		*p: defaultwindowsprinter		&& The name of the default Windows printer
	*</DefinedPropArrayMethod>

	*<PropValue>
		availableprinters = .NULL.
		cnamespace = My.Computer.Printer
		defaultvfpprinter = 
		defaultwindowsprinter = 
		Name = "printer"
		_memberdata = <VFPData>
			<memberdata name="openmytable" type="method" display="OpenMyTable"/>
			<memberdata name="addmembers" type="method" display="AddMembers"/>
			<memberdata name="cnamespace" type="property" display="cNameSpace"/>
			<memberdata name="builder" type="property" display="Builder"/>
			<memberdata name="availableprinters" type="property" display="AvailablePrinters"/>
			<memberdata name="availableprinters_access" type="property" display="AvailablePrinters_Access"/>
			<memberdata name="availableprinters_assign" type="property" display="AvailablePrinters_Assign"/>
			<memberdata name="defaultvfpprinter" type="property" display="DefaultVFPPrinter"/>
			<memberdata name="defaultvfpprinter_access" type="property" display="DefaultVFPPrinter_Access"/>
			<memberdata name="defaultvfpprinter_assign" type="property" display="DefaultVFPPrinter_Assign"/>
			<memberdata name="defaultwindowsprinter" type="property" display="DefaultWindowsPrinter"/>
			<memberdata name="defaultwindowsprinter_access" type="property" display="DefaultWindowsPrinter_Access"/>
			<memberdata name="defaultwindowsprinter_assign" type="property" display="DefaultWindowsPrinter_Assign"/>
			<memberdata name="pagesetup" type="method" display="PageSetup"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE availableprinters_access
		local laPrinters[1], ;
			lnI, ;
			loPrinter
		
		* Clear the collection if we already have one or instantiate it if not.
		
		if vartype(This.AvailablePrinters) = 'O'
			This.AvailablePrinters.Remove(-1)
		else
			This.AvailablePrinters = newobject('MyCollection', 'My.vcx')
		endif vartype(This.AvailablePrinters) = 'O'
		
		* Fill the collection with objects containing information about the available
		* printers.
		
		for lnI = 1 to aprinters(laPrinters, 1)
			loPrinter = createobject('Empty')
			addproperty(loPrinter, 'PrinterName', laPrinters[lnI, 1])
			addproperty(loPrinter, 'Port',        laPrinters[lnI, 2])
			addproperty(loPrinter, 'Driver',      laPrinters[lnI, 3])
			addproperty(loPrinter, 'Comment',     laPrinters[lnI, 4])
			addproperty(loPrinter, 'Location',    laPrinters[lnI, 5])
			This.AvailablePrinters.Add(loPrinter, laPrinters[lnI, 1])
		next lnI
		return This.AvailablePrinters
		
	ENDPROC

	PROCEDURE availableprinters_assign
		* Save the value if we're doing so from this class. Otherwise, throw a
		* "property is read-only" error.
		
		lparameters tuValue
		if This.CalledFromThisClass()
			This.AvailablePrinters = tuValue
		else
			error cnERR_PROPERTY_READ_ONLY, 'AvailablePrinters'
		endif This.CalledFromThisClass()
		
	ENDPROC

	PROCEDURE defaultvfpprinter_access
		* Because SET('PRINTER', 3) returns the default VFP printer in upper-case,
		* we'll check the AvailablePrinters collection so we can return the name in the
		* correct case.
		
		local lcName, ;
			loPrinter
		lcName    = set('PRINTER', 3)
		loPrinter = This.AvailablePrinters.Item(lcName)
		if vartype(loPrinter) = 'O'
			lcName = loPrinter.PrinterName
		endif vartype(loPrinter) = 'O'
		return lcName
		
	ENDPROC

	PROCEDURE defaultvfpprinter_assign
		* Set the default printer to the specified one if it exists (the string
		* "default" can be used to set the printer to the default Windows printer).
		
		lparameters tcPrinterName
		do case
			case not vartype(tcPrinterName) = 'C' and not empty(tcPrinterName)
				error cnERR_ARGUMENT_INVALID
			case upper(tcPrinterName) = 'DEFAULT'
				set printer to default
			otherwise
				loPrinter = This.AvailablePrinters.Item(tcPrinterName)
				if vartype(loPrinter) = 'O'
					set printer to name (tcPrinterName)
				endif vartype(loPrinter) = 'O'
		endcase
		
	ENDPROC

	PROCEDURE defaultwindowsprinter_access
		* Because SET('PRINTER', 2) returns the default Windows printer in upper-case,
		* we'll check the AvailablePrinters collection so we can return the name in the
		* correct case.
		
		local lcName, ;
			loPrinter
		lcName = set('PRINTER', 2)
		loPrinter = This.AvailablePrinters.Item(lcName)
		if vartype(loPrinter) = 'O'
			lcName = loPrinter.PrinterName
		endif vartype(loPrinter) = 'O'
		return lcName
		
	ENDPROC

	PROCEDURE defaultwindowsprinter_assign
		* Throw a "property is read-only" error.
		
		lparameters tuValue
		error cnERR_PROPERTY_READ_ONLY, 'DefaultWindowsPrinter'
		
	ENDPROC

	PROCEDURE Destroy
		* Nuke member objects.
		
		This.AvailablePrinters = .NULL.
		dodefault()
		
	ENDPROC

	PROCEDURE pagesetup		&& Displays the Page Setup dialog
		local llReturn
		llReturn = sys(1037, 0) = '1'
		return llReturn
		
	ENDPROC

ENDDEFINE
