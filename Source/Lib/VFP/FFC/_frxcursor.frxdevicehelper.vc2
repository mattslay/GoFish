*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="_frxcursor.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS frxdevicehelper AS custom 
	*<ClassComment>
		*This class knows how to read printer environment information. Usage:
		*
		*   x = NEWOBJECT( "frxDeviceHelper" )
		*   IF x.LoadDeviceInfo( cDRIVER, cDEVICE, frx.TAG2 )
		*       ? x.DpiX
		*       ? x.DpiY
		*       :
		*      etc
	*</ClassComment>
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_frxcursor.h"
	*<DefinedPropArrayMethod>
		*m: loaddeviceinfo		&& Parses out print device parameters  into member properties given specific device information: Parameters: cDriver, cDevice, cDevMode. Assumes current VFP default printer if no parameters specified.
		*m: loadfromfrx		&& Loads printer device parameters from an FRX cursor header record. Restores recno and selected alias. Params: [ cFrxAlias ] (assumes "frx" if none specified.)
		*m: loadfromhdc
		*m: loadfromstrings		&& Loads printer device parameters from string variables. Params: cExpr, cTag
		*p: actualx		&& Physical width of page in device units
		*p: actualy		&& Physical length of page in device units
		*p: dpix		&& Logical pixels-per-inch in the X dimension
		*p: dpiy		&& Logical pixels-per-inch in the Y dimension
		*p: errormessage		&& Occurs when the Valid event returns false (.F.), and provides a means to display an error message.
		*p: mmx		&& Horizontal page size in millimeters
		*p: mmy		&& Vertical page size in millimeters
		*p: offsetx		&& Physical printable page left margin
		*p: offsety		&& Physical printable page top margin
		*p: orientation		&& 0=Portrait, 1=Landscape
		*p: printablex		&& Horizontal page width in pixels
		*p: printabley		&& Vertical page length in pixels
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		actualx = 0
		actualy = 0
		dpix = 0
		dpiy = 0
		errormessage = ("")
		mmx = 0
		mmy = 0
		Name = "frxdevicehelper"
		offsetx = 0
		offsety = 0
		orientation = 0
		printablex = 0
		printabley = 0
		_memberdata = <VFPData>
			<memberdata name="loaddeviceinfo" type="Method" display="LoadDeviceInfo" favorites="false" override="false" script=""/>
			<memberdata name="loadfromfrx" type="Method" display="LoadFromFrx" favorites="false" override="false" script=""/>
			<memberdata name="loadfromstrings" type="Method" display="LoadFromStrings" favorites="false" override="false" script=""/>
			<memberdata name="loadfromhdc" type="Method" display="LoadFromHDC" favorites="false" override="false" script=""/>
			<memberdata name="dpix" type="Property" display="DpiX" favorites="false" override="false" script=""/>
			<memberdata name="dpiy" type="Property" display="DpiY" favorites="false" override="false" script=""/>
			<memberdata name="offsetx" type="Property" display="OffsetX" favorites="false" override="false" script=""/>
			<memberdata name="offsety" type="Property" display="OffsetY" favorites="false" override="false" script=""/>
			<memberdata name="actualx" type="Property" display="ActualX" favorites="false" override="false" script=""/>
			<memberdata name="actualy" type="Property" display="ActualY" favorites="false" override="false" script=""/>
			<memberdata name="mmx" type="Property" display="mmX" favorites="false" override="false" script=""/>
			<memberdata name="mmy" type="Property" display="mmY" favorites="false" override="false" script=""/>
			<memberdata name="printablex" type="Property" display="PrintableX" favorites="false" override="false" script=""/>
			<memberdata name="printabley" type="Property" display="PrintableY" favorites="false" override="false" script=""/>
			<memberdata name="orientation" type="Property" display="Orientation" favorites="false" override="false" script=""/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Init
		declare integer GetLastError ;
			in win32api
			
		declare integer SetLastError ;
			in win32api ;
			integer i
		
		declare integer CreateIC ;
			in gdi32 ;
			string lpszDriver, ;
			string lpszDevice, ;
			string lpszOutput, ;
			string lpdvmInit
			
		declare integer GetDeviceCaps ;
			in gdi32 ;
			integer hdc, ;
			integer nIndex 	
		
		declare integer DeleteDC ;
			in gdi32 ;
			integer hdc
				
		return .T.
		
	ENDPROC

	PROCEDURE loaddeviceinfo		&& Parses out print device parameters  into member properties given specific device information: Parameters: cDriver, cDevice, cDevMode. Assumes current VFP default printer if no parameters specified.
		lparameters lcDriver, lcDevice, lcDEVMODE
		
		THIS.errorMessage = ""
		
		local lRetVal
		lRetVal = .T.
		
		if empty( m.lcDevice )
			*---------------------------------------
			* Use default printer settings:
			*---------------------------------------
			lcDriver  = ""
			lcDevice  = set("PRINTER",3)
			lcDEVMODE = ""
		endif
		
		try 
			local iHDC, vResult
			iHDC = CreateIC( m.lcDriver, m.lcDevice, chr(0), m.lcDEVMODE )
			if m.iHDC = 0
				error CREATE_IC_FAILURE_LOC
			else
				THIS.LoadFromHDC( m.iHDC )
				vResult = DeleteDC( m.iHDC )
			endif
			
		catch to oErr
			THIS.errorMessage = oErr.message
			lRetVal = .F.
		endtry
		return m.lRetVal
	ENDPROC

	PROCEDURE loadfromfrx		&& Loads printer device parameters from an FRX cursor header record. Restores recno and selected alias. Params: [ cFrxAlias ] (assumes "frx" if none specified.)
		lparameter lcFrxAlias
		
		THIS.errorMessage = ""
		
		local curSel, curRec, lRetVal
		store .F. to lRetVal
		
		if empty(m.lcFrxAlias)
			lcFrxAlias = "frx"
		endif
		if not used( m.lcFrxAlias )
			return m.lRetVal
		endif
		
		*--------------------------------
		* Save current data/cursor state:
		*--------------------------------
		curSel = select(0)
		select (m.lcFrxAlias)
		curRec = recno()
		
		locate for PLATFORM="WINDOWS" and OBJTYPE = 1 and OBJCODE = 53
		if found()
		
			*---------------------------------------------------
			* Get the device info settings:
			*---------------------------------------------------
			lRetVal = THIS.LoadFromStrings( EXPR, TAG2 )
		
		endif
		*---------------------------------------------------
		* Restore data/cursor state:
		*---------------------------------------------------
		if m.curRec <= reccount()
			go m.curRec
		endif
		select (m.curSel)
		return m.lRetVal
		
	ENDPROC

	PROCEDURE loadfromhdc
		lparameters tiHDC
		
		#define HORZSIZE          4  && Horizontal size in millimeters 
		#define VERTSIZE          6  && Vertical size in millimeters 
		
		#define HORZRES           8  && Printable page width  / Horizontal width in pixels 
		#define VERTRES          10  && Printable page length / Vertical height in pixels 
		
		#define LOGPIXELSX       88  && DPI / Logical pixels/inch in X dimension
		#define LOGPIXELSY       90  && DPI / Logical pixels/inch in Y dimension
		
		#define PHYSICALWIDTH   110  && Actual page width  / Physical Width in device units
		#define PHYSICALHEIGHT  111  && Actual page length / Physical Height in device units
		
		#define PHYSICALOFFSETX 112  && Printable page left margin / Physical Printable Area x margin 
		#define PHYSICALOFFSETY 113  && Printable page top margin  / Physical Printable Area y margin
		
		with THIS
			.dpiX        = GetDeviceCaps( m.tiHDC, LOGPIXELSX )
			.dpiY        = GetDeviceCaps( m.tiHDC, LOGPIXELSY )
			.OffsetX     = GetDeviceCaps( m.tiHDC, PHYSICALOFFSETX )
			.OffsetY     = GetDeviceCaps( m.tiHDC, PHYSICALOFFSETY )
			.PrintableX  = GetDeviceCaps( m.tiHDC, HORZRES )
			.PrintableY  = GetDeviceCaps( m.tiHDC, VERTRES )
			.mmX         = GetDeviceCaps( m.tiHDC, HORZSIZE )
			.mmY         = GetDeviceCaps( m.tiHDC, VERTSIZE )
			.ActualX     = GetDeviceCaps( m.tiHDC, PHYSICALWIDTH )
			.ActualY     = GetDeviceCaps( m.tiHDC, PHYSICALHEIGHT )
		endwith
		return
	ENDPROC

	PROCEDURE loadfromstrings		&& Loads printer device parameters from string variables. Params: cExpr, cTag
		lparameters tcEXPR, tcTAG2
		
		local i, cLine, cDriver, lDriver, cDevice, lDevice
		
		*---------------------------------------------------
		* Read DRIVER and DEVICE values from EXPR	
		*---------------------------------------------------
		for i = 1 to memlines(m.tcEXPR)
			cLine = mline(m.tcEXPR,m.i)
			do case
			case m.cLine = "DRIVER=" and not m.lDriver
				cDriver = substr(m.cLine,8)
				lDriver = .T.
		
			case m.cLine = "DEVICE=" and not m.lDevice
				cDevice = substr(m.cLine,8)
				lDevice = .T.
				
			endcase		
			if m.lDevice and m.lDriver
				exit
			endif
		endfor
		
		*---------------------------------------------------
		* Get the device info settings:
		*---------------------------------------------------
		return THIS.LoadDeviceInfo( m.cDriver, m.cDevice, m.tcTAG2 )
		
	ENDPROC

ENDDEFINE
