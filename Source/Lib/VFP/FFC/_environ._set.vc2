*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="_environ.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS _set AS _custom OF "_base.vcx" 		&& Used to save, set, and restore SET commands.  Optional parameters:   uArgument1 [, uArgument2] [, lNoRestore].  This classes only handles SET commands that have a unique first four characters in their name and a few SET commands not fully supported.
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: checkvalue		&& Returns the proper SET(<command>) value baesd on the SET command name.
		*m: disablerestore		&& Disables the automatic restore of settings when in object release mode.
		*m: get		&& No parameter returns the current SET() value.  1 returns the current SET(,1) value.  2 returns the current SET(,2) value.  0 returns the original SET() value.  -1 returns the original SET(,1) value.  -2 returns the original SET(,2) value.
		*m: getsetcommand		&& Returns the SET command name.
		*m: restore		&& Restores the original SET settings.
		*m: set		&& Sets environment setting. uArgument1 [, uArgument2] [, lNoRestore]
		*p: csetcommand		&& The SET command name.
		*p: lerror		&& Indicates an error occured during the execution of the SET command.
		*p: lnorestore		&& Specifies if the original SET values are restored when the object is released.
		*p: uoldvalue		&& The original setting of the SET command as SET(<command>).
		*p: uoldvalue1		&& The original setting of the SET command as SET(<command>,1).
		*p: uoldvalue2		&& The original setting of the SET command as SET(<command>,2).
	*</DefinedPropArrayMethod>

	PROTECTED csetcommand,lerror,lnorestore,uoldvalue,uoldvalue1,uoldvalue2
	*<PropValue>
		csetcommand = 
		Name = "_set"
		uoldvalue = .NULL.
		uoldvalue1 = .NULL.
		uoldvalue2 = .NULL.
	*</PropValue>
	
	PROTECTED PROCEDURE checkvalue		&& Returns the proper SET(<command>) value baesd on the SET command name.
		LPARAMETERS tcValue
		
		IF TYPE("tcValue")#"C"
			RETURN tcValue
		ENDIF
		IF LEFT(this.cSetCommand,4)=="DEFA"
			RETURN tcValue+SYS(2003)
		ENDIF
		RETURN tcValue
		
	ENDPROC

	PROCEDURE Destroy
		IF NOT this.lNoRestore
			RETURN this.Restore()
		ENDIF
		
	ENDPROC

	PROCEDURE disablerestore		&& Disables the automatic restore of settings when in object release mode.
		this.lNoRestore=.T.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		
		this.lError=.T.
		
	ENDPROC

	PROCEDURE get		&& No parameter returns the current SET() value.  1 returns the current SET(,1) value.  2 returns the current SET(,2) value.  0 returns the original SET() value.  -1 returns the original SET(,1) value.  -2 returns the original SET(,2) value.
		LPARAMETERS tnArgument
		LOCAL lcValue,llAdjust
		
		llAdjust=.F.
		DO CASE
			CASE TYPE("tnArgument")#"N"
				lcValue=this.CheckValue(SET(this.cSetCommand))
			CASE tnArgument=0
				lcValue=this.uOldValue
				llAdjust=.T.
			CASE tnArgument=1
				lcValue=SET(this.cSetCommand,1)
			CASE tnArgument=2
				lcValue=SET(this.cSetCommand,2)
			CASE tnArgument=-1
				lcValue=this.uOldValue1
			CASE tnArgument=-2
				lcValue=this.uOldValue2
			OTHERWISE
				RETURN .NULL.
		ENDCASE
		RETURN lcValue
		
	ENDPROC

	PROCEDURE getsetcommand		&& Returns the SET command name.
		RETURN this.cSetCommand
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcSetCommand,tuArgument1,tuArgument2,tlDisableRestore
		LOCAL lnParameters
		
		lnParameters=PCOUNT()
		IF lnParameters=0 OR EMPTY(tcSetCommand) OR ISNULL(tcSetCommand) OR ;
				TYPE("tcSetCommand")#"C"
			RETURN
		ENDIF
		this.lError=.F.
		this.cSetCommand=UPPER(ALLTRIM(tcSetCommand))
		this.uOldValue=this.CheckValue(SET(this.cSetCommand))
		IF this.lError
			RETURN .F.
		ENDIF
		this.uOldValue1=SET(this.cSetCommand,1)
		this.uOldValue2=SET(this.cSetCommand,2)
		IF lnParameters>=2 AND ;
				NOT this.Set(tuArgument1,tuArgument2,tlDisableRestore)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE restore		&& Restores the original SET settings.
		LOCAL llResult,lcOldValue,lcOldValue1,lcOldValue2
		
		llResult=.T.
		lcOldValue=this.Get(0)
		lcOldValue1=this.Get(-1)
		lcOldValue2=this.Get(-2)
		IF (NOT lcOldValue1==SET(this.cSetCommand,1) AND ;
				NOT this.Set(lcOldValue,lcOldValue1)) OR ;
			(NOT lcOldValue2==SET(this.cSetCommand,2) AND ;
				NOT this.Set(lcOldValue,lcOldValue2))
			llResult=.F.
		ENDIF
		IF NOT lcOldValue==SET(this.cSetCommand) AND ;
				NOT this.Set(lcOldValue)
			llResult=.F.
		ENDIF
		RETURN llResult
		
	ENDPROC

	PROCEDURE set		&& Sets environment setting. uArgument1 [, uArgument2] [, lNoRestore]
		LPARAMETERS tuArgument1,tuArgument2,tlDisableRestore
		LOCAL lcSetCommand,lcType1,lcType2,lcClauses
		
		this.lError=.F.
		IF PARAMETERS()=0
			RETURN .F.
		ENDIF
		lcType1=TYPE("tuArgument1")
		lcType2=TYPE("tuArgument2")
		lcSetCommand=ALLTRIM(LEFT(this.cSetCommand,4))
		IF NOT ISNULL(tuArgument2) AND NOT lcType2=="L" OR tuArgument2
			IF lcType2=="C"
				IF lcSetCommand=="PRIN" AND UPPER(tuArgument2)=="PRN"
					lcClauses=" TO"
				ELSE
					lcClauses=" TO ["+tuArgument2+"]"
				ENDIF
			ELSE
				lcClauses=" TO "+ALLTRIM(STR(tuArgument2,9))
			ENDIF
			SET &lcSetCommand &lcClauses
		ENDIF
		IF NOT ISNULL(tuArgument1) AND NOT lcType1=="L" OR tuArgument1
			IF lcType1=="C"
				lcClauses=tuArgument1
				IF lcSetCommand=="CLAS" OR lcSetCommand=="COLL" OR ;
						lcSetCommand=="COVE" OR lcSetCommand=="DATA" OR ;
						lcSetCommand=="DEFA" OR lcSetCommand=="DEBU" OR ;
						lcSetCommand=="DEVI" OR lcSetCommand=="DISP" OR ;
						lcSetCommand=="EVEN" OR lcSetCommand=="FILT" OR ;
						lcSetCommand=="FORM" OR lcSetCommand=="INDE" OR ;
						lcSetCommand=="KEY" OR 	lcSetCommand=="KEYC" OR ;
						lcSetCommand=="LIBR" OR lcSetCommand=="MACK" OR ;
						lcSetCommand=="MARK" OR lcSetCommand=="MESS" OR ;
						lcSetCommand=="NOCP" OR lcSetCommand=="ORDE" OR ;
						lcSetCommand=="PATH" OR lcSetCommand=="PDSE" OR ;
						lcSetCommand=="POIN" OR lcSetCommand=="PROC" OR ;
						lcSetCommand=="RELA" OR lcSetCommand=="SEPA" OR ;
						lcSetCommand=="SKIP" OR lcSetCommand=="TOPI" OR ;
						lcSetCommand=="TYPE" OR lcSetCommand=="UDFP" OR ;
						lcSetCommand=="XCMD"
					lcClauses=" TO "+lcClauses
				ENDIF
			ELSE
				lcClauses=" TO "+ALLTRIM(STR(tuArgument1,9))
			ENDIF
			SET &lcSetCommand &lcClauses
		ENDIF
		IF this.lError OR (tlDisableRestore AND NOT this.DisableRestore())
			RETURN .F.
		ENDIF
		
	ENDPROC

ENDDEFINE
