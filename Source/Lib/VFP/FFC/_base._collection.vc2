*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="_base.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS _collection AS collection 		&& Foundation Collection class.
 	*< CLASSDATA: Baseclass="collection" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addtoproject		&& Dummy code for adding files to project.
		*m: newinstance		&& Returns new instance of object.
		*m: ninstances_access		&& Access method for nInstances property.
		*m: ninstances_assign		&& Assign method for nInstances property.
		*m: nobjectrefcount_access		&& Access method for nObjectRefCount property.
		*m: nobjectrefcount_assign		&& Assign method for nObjectRefCount property.
		*m: release		&& Releases object from memory.
		*m: releaseobjrefs		&& Releases all object references of aObjectRefs array.
		*m: sethost		&& Set oHost property to form reference object.
		*m: setobjectref		&& Set object reference to specific property.
		*m: setobjectrefs		&& Place holder method for listing SetObjectRef method calls.
		*p: builder		&& Bulder property.
		*p: builderx		&& BuilderX property.
		*p: csetobjrefprogram		&& Program to be called when when setting an object references via the SetObjectRef method.
		*p: cversion		&& Version property.
		*p: lautobuilder		&& Specifies if custom FFC builder is automatically launched when instance is added to a container in design mode, even if the control pallette Builder Lock button is off.
		*p: lautosetobjectrefs		&& Specifiies if the SetObjectRefs method is automatically called from the Init method.
		*p: lignoreerrors		&& Specifies if the default FFC error handler is executed when an error occurs.
		*p: lrelease		&& Indicates the object's Release method has been executed and the object is in the process of being released from memory.
		*p: lsethost		&& Specifies if the SetHost method is automatically called from the Init method to set the oHost property to THISFORM.
		*p: ninstances		&& Number of instances.
		*p: nobjectrefcount		&& Returns the number of items in the object reference array property aObjectRefs.
		*p: ohost		&& Object reference to host object (generally THISFORM), which is automatically set on Init if lSetHost is .T.
		*p: vresult		&& Variant result property for internal usage when calling programs in PRGs and a return file is required.
		*a: aobjectrefs[1,3]		&& Array of object references properties.
	*</DefinedPropArrayMethod>

	*<PropValue>
		builder = 
		builderx = (HOME()+"Wizards\BuilderD,BuilderDForm")
		csetobjrefprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"SetObjRf.prg")
		cversion = 
		Height = 23
		Name = "_collection"
		ninstances = 0
		nobjectrefcount = 0
		ohost = .NULL.
		vresult = .T.
		Width = 23
	*</PropValue>
	
	PROTECTED PROCEDURE addtoproject		&& Dummy code for adding files to project.
		*-- Dummy code for adding files to project.
		RETURN
		
		DO SetObjRf.prg
		
	ENDPROC

	PROCEDURE Destroy
		IF this.lRelease
			RETURN .F.
		ENDIF
		this.lRelease=.T.
		this.ReleaseObjRefs
		this.oHost=.NULL.
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL lcOnError,lcErrorMsg,lcCodeLineMsg
		
		IF this.lIgnoreErrors OR _vfp.StartMode>0
			RETURN .F.
		ENDIF
		lcOnError=UPPER(ALLTRIM(ON("ERROR")))
		IF NOT EMPTY(lcOnError)
			lcOnError=STRTRAN(STRTRAN(STRTRAN(lcOnError,"ERROR()","nError"), ;
					"PROGRAM()","cMethod"),"LINENO()","nLine")
			&lcOnError
			RETURN
		ENDIF
		lcErrorMsg=MESSAGE()+CHR(13)+CHR(13)+this.Name+CHR(13)+ ;
				"Error:           "+ALLTRIM(STR(nError))+CHR(13)+ ;
				"Method:       "+LOWER(ALLTRIM(cMethod))
		lcCodeLineMsg=MESSAGE(1)
		IF BETWEEN(nLine,1,100000) AND NOT lcCodeLineMsg="..."
			lcErrorMsg=lcErrorMsg+CHR(13)+"Line:            "+ALLTRIM(STR(nLine))
			IF NOT EMPTY(lcCodeLineMsg)
				lcErrorMsg=lcErrorMsg+CHR(13)+CHR(13)+lcCodeLineMsg
			ENDIF
		ENDIF
		WAIT CLEAR
		MESSAGEBOX(lcErrorMsg,16,_screen.Caption)
		ERROR nError
		
	ENDPROC

	PROCEDURE Init
		IF this.lSetHost
			this.SetHost
		ENDIF
		IF this.lAutoSetObjectRefs AND NOT this.SetObjectRefs(this)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE newinstance		&& Returns new instance of object.
		LPARAMETERS tnDataSessionID
		LOCAL oNewObject,lnLastDataSessionID
		
		lnLastDataSessionID=SET("DATASESSION")
		IF TYPE("tnDataSessionID")=="N" AND tnDataSessionID>=1
			SET DATASESSION TO tnDataSessionID
		ENDIF
		oNewObject=NEWOBJECT(this.Class,this.ClassLibrary)
		SET DATASESSION TO (lnLastDataSessionID)
		RETURN oNewObject
		
	ENDPROC

	PROCEDURE ninstances_access		&& Access method for nInstances property.
		LOCAL laInstances[1]
			
		RETURN AINSTANCE(laInstances,this.Class)
		
	ENDPROC

	PROCEDURE ninstances_assign		&& Assign method for nInstances property.
		LPARAMETERS vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE nobjectrefcount_access		&& Access method for nObjectRefCount property.
		LOCAL lnObjectRefCount
		
		lnObjectRefCount=ALEN(this.aObjectRefs,1)
		IF lnObjectRefCount=1 AND EMPTY(this.aObjectRefs[1])
			lnObjectRefCount=0
		ENDIF
		RETURN lnObjectRefCount
		
	ENDPROC

	PROCEDURE nobjectrefcount_assign		&& Assign method for nObjectRefCount property.
		LPARAMETERS m.vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE release		&& Releases object from memory.
		LOCAL lcBaseClass
		
		IF this.lRelease
			NODEFAULT
			RETURN .F.
		ENDIF
		this.lRelease=.T.
		lcBaseClass=LOWER(this.BaseClass)
		this.oHost=.NULL.
		this.ReleaseObjRefs
		IF NOT INLIST(lcBaseClass+" ","form ","formset ","toolbar ")
			RELEASE this
		ENDIF
		
	ENDPROC

	PROCEDURE releaseobjrefs		&& Releases all object references of aObjectRefs array.
		LOCAL lcName,oObject,lnCount
		
		IF this.nObjectRefCount=0
			RETURN
		ENDIF
		FOR lnCount = this.nObjectRefCount TO 1 STEP -1
			lcName=this.aObjectRefs[lnCount,1]
			IF EMPTY(lcName) OR NOT PEMSTATUS(this,lcName,5) OR TYPE("this."+lcName)#"O"
				LOOP
			ENDIF
			oObject=this.&lcName
			IF ISNULL(oObject)
				LOOP
			ENDIF
			IF TYPE("oObject")=="O" AND NOT ISNULL(oObject) AND PEMSTATUS(oObject,"Release",5)
				oObject.Release
			ENDIF
			IF NOT ISNULL(oObject) AND PEMSTATUS(oObject,"oHost",5)
				oObject.oHost=.NULL.
			ENDIF
			this.&lcName=.NULL.
			oObject=.NULL.
		ENDFOR
		DIMENSION this.aObjectRefs[1,3]
		this.aObjectRefs=""
		
	ENDPROC

	PROCEDURE sethost		&& Set oHost property to form reference object.
		this.oHost=IIF(TYPE("thisform")=="O",thisform,.NULL.)
		
	ENDPROC

	PROCEDURE setobjectref		&& Set object reference to specific property.
		LPARAMETERS tcName,tvClass,tvClassLibrary
		LOCAL lvResult
		
		this.vResult=.T.
		DO (this.cSetObjRefProgram) WITH (this),(tcName),(tvClass),(tvClassLibrary)
		lvResult=this.vResult
		this.vResult=.T.
		RETURN lvResult
		
	ENDPROC

	PROCEDURE setobjectrefs		&& Place holder method for listing SetObjectRef method calls.
		LPARAMETERS toObject
		
		RETURN
		
	ENDPROC

ENDDEFINE
