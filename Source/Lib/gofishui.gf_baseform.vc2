*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="gofishui.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS gf_baseform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: copyobjectproperties
		*m: loadformsettings
		*m: savedbc_close		&& Close database for settings / history data.
		*m: savedbc_open		&& Open database for settings / history data. Create if not exist.
		*m: saveformsettings
		*m: usetable		&& use a table, try to pack
		*p: ccr_storelocal		&& Location of storage.
		*p: csavedbc		&& Database to store settings and history.
		*p: csaveddbc		&& Last DBC used.
		*p: cuisettingsfile
		*p: lcr_allow		&& Turn on CR options
		*p: lcr_allowed
		*p: lsavesettings		&& This property can be used to prevent the form from saving its settings when closed. It will start out .T. each time GoFish is launched.
		*p: nfirstload		&& LoadFormSettings is not run once.
		*p: oform
		*p: omy
		*p: osearchengine
		*p: osearchoptions
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "GoFish"
		ccr_storelocal = (ADDBS(HOME(7) + 'GoFish_'))
		csavedbc = GF_Result.dbc
		csaveddbc = 
		cuisettingsfile = 
		Desktop = .T.
		DoCreate = .T.
		Height = 325
		lsavesettings = .T.
		Name = "gf_baseform"
		nfirstload = 0
		oform = .NULL.
		omy = .NULL.
		osearchengine = .NULL.
		osearchoptions = .NULL.
		Width = 662
		_memberdata = <VFPData>
			<memberdata name="loadformsettings" display="LoadFormSettings"/>
			<memberdata name="cuisettingsfile" display="cUISettingsFile"/>
			<memberdata name="saveformsettings" display="SaveFormSettings"/>
			<memberdata name="oform" display="oForm"/>
			<memberdata name="osearchengine" display="oSearchEngine"/>
			<memberdata name="osearchoptions" display="oSearchOptions"/>
			<memberdata name="omy" display="oMy"/>
			<memberdata name="copyobjectproperties" display="CopyObjectProperties"/>
			<memberdata name="nfirstload" type="property" display="nFirstLoad" favorites="False"/>
			<memberdata name="ccr_storelocal" type="property" display="cCR_StoreLocal" favorites="False"/>
			<memberdata name="lcr_allow" type="property" display="lCR_Allow" favorites="False"/>
			<memberdata name="csavedbc" type="property" display="cSaveDBC" favorites="False"/>
			<memberdata name="lsavesettings" type="property" display="lSaveSettings" favorites="False"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE Activate
		Set Talk Off && Just in case user has turn this on somehow or accidentally
		Set Echo Off
		Set Exact On
		Set Deleted ON
	ENDPROC

	PROCEDURE copyobjectproperties
		Lparameters toSourceObject, toNewObject
		*-- Adapted from: http://www.berezniker.com/content/pages/visual-foxpro/shallow-copy-object
		
		Local laProps[1], lcPropName, lnI
		
		For lnI = 1 To Amembers(laProps, toSourceObject, 0, 'U')
		    lcPropName = Lower(laProps[lnI])
		    If Type([toSourceObject.] + lcPropName ,1) = 'A'
		        AddProperty(toNewObject, lcPropName + '[1]', Null )
		        = Acopy(toSourceObject.&lcPropName, loNewObject.&lcPropName)
		    Else
		        AddProperty(toNewObject, lcPropName, Evaluate('toSourceObject.' + lcPropName) )
		    Endif
		Endfor
		
		Return toNewObject
		
	ENDPROC

	PROCEDURE Destroy
		DoDefault()
		
		If Thisform.lSaveSettings
		*-- Save UI form settings XML file
		*	Wait 'Save GF form settings' Window at 20, 30 Nowait
			This.SaveFormSettings()
		Endif
		
	ENDPROC

	PROCEDURE Init
		Lparameters;
			toForm,;
			tlSkipLoadSettings
		
		If Vartype(toForm) = 'O'
			This.oForm = toForm
		
			This.oSearchEngine  = toForm.oSearchEngine
			This.oSearchOptions = toForm.oSearchEngine.oSearchOptions
		
			If Pemstatus(m.toForm, "cCR_StoreLocal", 5) Then
				This.cCR_StoreLocal = m.toForm.cCR_StoreLocal
			Endif &&PEMSTATUS(m.toForm, "cCR_StoreLocal", 5)
		
		Endif
		
		If This.Desktop Or This.Dockable=1 Then
		*Move forms with this setting into screen, might be odd on multiple monitors
		
		*get coords of vfp
			This.Top  = _Screen.Top
			This.Left = _Screen.Left
		*twice, first reads odd values
			This.Top  = _Screen.Top
			This.Left = _Screen.Left
		Endif &&This.Desktop Or This.Dockable=1
		
		If !m.tlSkipLoadSettings Then
			This.LoadFormSettings() && Form size and position, as well as a few custom properties that are store on the form
		Endif &&!m.tlSkipLoadSettings
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off
		Set Echo Off
		Set Deleted On
		
		DoDefault()
		
	ENDPROC

	PROCEDURE loadformsettings
		Local;
			lcFile     As String,;
			loMy       As 'My' Of 'My.vcx',;
			loSettings As Object
		
		Local;
			lnTop          As Integer,;
			lnLeft         As Integer,;
			lnWidth        As Integer,;
			lnHeight       As Integer,;
			lnScreenTop    As Integer,;
			lnScreenBottom As Integer,;
			lnScreenLeft   As Integer,;
			lnScreenRight  As Integer,;
			loMonitor      As Empty
		
		lcFile = Lower(Strtran(This.Name, ' ', '_') + '_Form_Settings.xml')
		
		*rename old style settings file
		If ! m.lcFile==Lower(This.cUISettingsFile);
				And File(This.cCR_StoreLocal + m.lcFile) Then
		
			If File(This.cCR_StoreLocal + This.cUISettingsFile) Then
				Delete File (This.cCR_StoreLocal + m.lcFile)
		
			Else  &&File(This.cCR_StoreLocal + This.cUISettingsFile)
				Rename (This.cCR_StoreLocal + m.lcFile) To (This.cCR_StoreLocal + This.cUISettingsFile)
		
			Endif &&File(This.cCR_StoreLocal + This.cUISettingsFile)
		Endif &&! m.lcFile==Lower(This.cUISettingsFile) And File(This.cCR_StoreLocal + m.lcFile)
		
		lcFile = This.cCR_StoreLocal + This.cUISettingsFile
		
		loMy       = Newobject('My', 'My.vcx')
		loSettings = m.loMy.Settings
		
		Thisform.oMy = m.loMy
		
		If !File(m.lcFile)
			Return
		Endif
		
		loSettings.Load(m.lcFile)
		
		*-- Resize form size and position--------------------
		If loSettings.Exists('FormTop')
			With m.loSettings
				lnTop          = 0
				lnHeight       = This.Height
				lnLeft         = 0
				lnWidth        = This.Width
		
				lnScreenTop    = 0
				lnScreenBottom = _Screen.Height
				lnScreenLeft   = 0
				lnScreenRight  = _Screen.Width
		
				If This.Desktop Or This.Dockable=1 Then
					loMonitor = GF_GetMonitorStatistics()
		
					lnTop          = _Screen.Top
					lnLeft         = _Screen.Left
		
					lnScreenTop    = m.loMonitor.gnVirtualTop
					lnScreenBottom = m.loMonitor.gnVirtualBottom
					lnScreenLeft   = m.loMonitor.gnVirtualLeft
					lnScreenRight  = m.loMonitor.gnVirtualRight
		
				Endif &&This.Desktop Or This.Dockable=1
		
				If Between(.FormTop , m.lnScreenTop, m.lnScreenBottom) Then
					lnTop    = .FormTop
					lnHeight = .FormHeight
				Endif &&Between(.FormTop , m.lnScreenTop, m.lnScreenBottom)
		
				If Between(.FormLeft, m.lnScreenLeft, m.lnScreenRight) Then
					lnLeft   = .FormLeft
					lnWidth  = .FormWidth
				Endif &&Between(.FormLeft, m.lnScreenLeft, m.lnScreenRight)
		
				Thisform.Move(m.lnLeft, m.lnTop, m.lnWidth, m.lnHeight)
		
			Endwith
		
			This.Resize()
		Endif
		
	ENDPROC

	PROCEDURE LostFocus
		Activate Screen
	ENDPROC

	PROCEDURE savedbc_close		&& Close database for settings / history data.
		Local;
			lcDbc As Date
		
		lcDbc = This.cCR_StoreLocal + This.cSaveDBC
		
		If File(m.lcDbc) Then
			Try
					Set Database To (m.lcDbc)
					Close Databases
				Catch
		
				Finally
					Set Database To (This.cSavedDBC)
					This.cSavedDBC = ""
		
			Endtry
		Endif &&File(m.lcDbc)
		
	ENDPROC

	PROCEDURE savedbc_open		&& Open database for settings / history data. Create if not exist.
		Local;
			lcDbc    As String,;
			lnDBC    As Number,;
			llReturn As Boolean
		
		Local Array;
			laDataBases(1)
		
		lcDbc = This.cCR_StoreLocal + This.cSaveDBC
		
		For lnDBC = 1 To Adatabases(laDataBases)
			If Upper(laDataBases(m.lnDBC,2))==Upper(m.lcDbc) Then
				Return .T.
		
			Endif &&Upper(laDataBases(m.lnDBC,2))==Upper(m.lcDbc)
		Endfor &&lnDBC
		
		If File(m.lcDbc) Then
			This.cSavedDBC = Set("Database")
			Open Database (m.lcDbc)
			Return .T.
		
		Endif &&File(m.lcDbc)
		
		Return .F.
		
	ENDPROC

	PROCEDURE saveformsettings
		Lparameters;
			tcFolder,;
			tcFile
			
		Local;
			lcFile     As String,;
			loSettings As Object
		
		If Empty(m.tcFolder) Then
			lcFile = This.cCR_StoreLocal
		Else  &&EMPTY(m.tcFolder)
			lcFile = m.tcFolder
		Endif &&EMPTY(m.tcFolder)
		
		If Empty(m.tcFile) Then
			lcFile = m.lcFile + This.cUISettingsFile
		Else  &&Empty(m.tcFile)
			lcFile = m.lcFile + m.tcFile
		Endif &&Empty(m.tcFile)
		
		loSettings = Thisform.oMy.Settings
		
		With m.loSettings
		*-- Form Size and Position -----------------------------
			.Add('FormTop',    This.Top)
			.Add('FormLeft',   This.Left)
			.Add('FormHeight', This.Height)
			.Add('FormWidth',  This.Width)
		
			.Save(m.lcFile)
		
		Endwith
		
		
	ENDPROC

	PROCEDURE usetable		&& use a table, try to pack
		Lparameters;
			tcTable,;
			tcAlias
		
		tcAlias = Evl(m.tcAlias,Juststem(m.tcTable))
		
		Try
				Use (m.tcTable) Exclusive In Select(m.tcAlias)
				Pack
			Catch
			Finally
				Use (m.tcTable) In Select(m.tcAlias)
		Endtry
		
		Select(m.tcAlias)
		
	ENDPROC

ENDDEFINE
