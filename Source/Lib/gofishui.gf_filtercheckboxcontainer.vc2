*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="gofishui.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS gf_filtercheckboxcontainer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: cleardecoration
		*m: decorate
		*m: ldecorated_assign
		*m: setallcheckboxes
		*m: shouldbedecorated
		*p: cfilter
		*p: ldecorated
		*p: ncheckboxcount
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BorderColor = 150,150,150
		cfilter = 
		Height = 390
		ldecorated = .F.
		Name = "gf_filtercheckboxcontainer"
		ncheckboxcount = 0
		Width = 218
		_memberdata = <VFPData>
			<memberdata name="setallcheckboxes" display="SetAllCheckBoxes"/>
			<memberdata name="cfilter" display="cFilter"/>
			<memberdata name="ncheckboxcount" display="nCheckBoxCount"/>
			<memberdata name="bordercolor" display="BorderColor"/>
			<memberdata name="clear" display="Clear"/>
			<memberdata name="decorate" display="Decorate"/>
			<memberdata name="cleardecoration" display="ClearDecoration"/>
			<memberdata name="ldecorated" display="lDecorated"/>
			<memberdata name="ldecorated_assign" display="lDecorated_Assign"/>
			<memberdata name="shouldbedecorated" display="ShouldBeDecorated"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Anchor = 4, ;
		Caption = "All", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 10, ;
		Name = "Command1", ;
		TabStop = .F., ;
		Top = 367, ;
		Width = 31
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Anchor = 4, ;
		Caption = "Clear", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 46, ;
		Name = "Command2", ;
		TabStop = .F., ;
		Top = 367, ;
		Width = 48
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "Caption", ;
		Height = 17, ;
		Left = 7, ;
		Name = "Label1", ;
		Top = 4, ;
		Width = 207
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 6, ;
		Name = "Line1", ;
		Top = 20, ;
		Width = 207
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		Anchor = 14, ;
		BorderColor = 192,192,192, ;
		Height = 0, ;
		Left = 5, ;
		Name = "Line2", ;
		Top = 362, ;
		Visible = .F., ;
		Width = 206
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
		For Each loControl in This.Controls
			If Upper(loControl.BaseClass) = 'CHECKBOX'
				loControl.value = 0
			Endif
		Endfor
		
		This.Refresh()
	ENDPROC

	PROCEDURE cleardecoration
		This.lDecorated = .F.
		
	ENDPROC

	PROCEDURE decorate
		This.lDecorated = .T.
	ENDPROC

	PROCEDURE Init
		Local loControl
		
		For Each loControl in This.Controls
			If Upper(loControl.baseclass) = 'CHECKBOX'
				this.nCheckBoxCount = this.nCheckBoxCount + 1
				BindEvent(loControl, 'Click', this, 'Refresh')
		
				*-- Apply This.label.caption so ControlSource will to match class property
				If !Empty(this.Label1.Tag) && Tag can override caption to set controlsource
					loControl.ControlSource = this.label1.Tag + '_' + Iif(!Empty(loControl.tag), loControl.Tag, loControl.Caption)
				Else
					lcProperty = Strtran(loControl.Caption, '<', '')
					lcProperty = Strtran(lcProperty, '>', '')
					lcProperty = Strtran(lcProperty, ' ', '')
		
					loControl.ControlSource = this.label1.Caption + '_' + Iif(!Empty(loControl.tag), loControl.Tag, lcProperty)
				Endif		
			
			Endif
				
		EndFor
		
		     
	ENDPROC

	PROCEDURE ldecorated_assign
		Lparameters tlDecorated
		This.lDecorated = m.tlDecorated
		
		If m.tlDecorated
			This.Label1.FontBold = .T.
			This.BorderWidth	 = 2
			This.BorderColor	 = Rgb(255, 0, 0)
		Else
			This.Label1.FontBold = .F.
			This.BorderWidth	 = 1
			This.BorderColor	 = Rgb(175, 175, 175)
		Endif
		
		If Pemstatus(Thisform, 'DecoratePage', 5) And This.Parent.BaseClass = 'Page'
			Thisform.DecoratePage(This.Parent)
		Endif
	ENDPROC

	PROCEDURE Refresh
		This.Label1.FontBold = .F.
		This.ClearDecoration()
		
		If This.ShouldBeDecorated()
			This.Label1.FontBold = .T.
			This.Decorate()
		Endif
		
	ENDPROC

	PROCEDURE setallcheckboxes
		Lparameters tnValue
		
		For each loControl in This.controls
			If PemStatus(loControl, 'Value', 5)
		*		If loControl.Enabled
					loControl.value = tnValue
		*		EndIf
			EndIf
		EndFor
		
		
	ENDPROC

	PROCEDURE shouldbedecorated
		Local loControl
		For Each m.loControl In This.Controls
			If Upper(m.loControl.BaseClass) = 'CHECKBOX' And Not Empty(m.loControl.Value)&& and loControl.Enabled
				Return .T.
				Exit
			Endif
		Endfor
		Return .F.
	ENDPROC

	PROCEDURE Command1.Click
		This.Parent.SetAllCheckboxes(1)
		This.Parent.Refresh()
	ENDPROC

	PROCEDURE Command2.Click
		This.parent.SetAllCheckboxes(0)
		This.Parent.Refresh()
	ENDPROC

ENDDEFINE
