*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="sfsplitter.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS sfsplitter AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Gripper" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getobject1size		&& Gets the size for Object 1
		*m: getobject2size		&& Gets the size for Object 2
		*m: getobjectnames		&& Populates an array from a comma-delimited list
		*m: getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		*m: moveobject1		&& Moves Object 1 to the new position
		*m: moveobject2		&& Moves Object 2 to the new position
		*m: movesplittertoposition		&& Moves the splitter to the specified position
		*m: setposition		&& Sets the new position for the splitter
		*m: setupgripper		&& A method to setup various properties on the gripper to visually configure it for Vertical or Horizontal configuration.
		*m: splittermoved		&& Called after the splitter is moved
		*p: cobject1name		&& The name of the object above (for a vertical splitter) or to the left of (for a horizontal splitter) the splitter
		*p: cobject2name		&& The name of the object below (for a vertical splitter) or to the right of (for a horizontal splitter) the splitter
		*p: linitialized		&& .T. after the control has been initialized
		*p: ndots		&& Enter a value between 0 and 5 for the number of dots to be shown on the gripper. Enter 0 for none.
		*p: nobject1minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 1
		*p: nobject2minsize		&& The minimum height (for a vertical splitter) or width (for a horizontal splitter) of Object 2
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		BackColor = 192,192,192
		BackStyle = 1
		BorderColor = 255,0,0
		BorderWidth = 2
		cobject1name = 
		cobject2name = 
		Height = 248
		linitialized = .F.
		Name = "sfsplitter"
		ndots = 5
		nobject1minsize = 150
		nobject2minsize = 150
		Width = 25
		_memberdata = <VFPData>
			<memberdata name="getobjectnames" type="method" display="GetObjectNames"/>
			<memberdata name="movesplittertoposition" type="method" display="MoveSplitterToPosition"/>
			<memberdata name="linitialized" type="property" display="lInitialized"/>
			<memberdata name="cobject1name" type="property" display="cObject1Name"/>
			<memberdata name="cobject2name" type="property" display="cObject2Name"/>
			<memberdata name="nobject1minsize" type="property" display="nObject1MinSize"/>
			<memberdata name="nobject2minsize" type="property" display="nObject2MinSize"/>
			<memberdata name="getobject1size" type="method" display="GetObject1Size"/>
			<memberdata name="getobject2size" type="method" display="GetObject2Size"/>
			<memberdata name="setposition" type="method" display="SetPosition"/>
			<memberdata name="moveobject1" type="method" display="MoveObject1"/>
			<memberdata name="moveobject2" type="method" display="MoveObject2"/>
			<memberdata name="getposition" type="method" display="GetPosition"/>
			<memberdata name="splittermoved" type="method" display="SplitterMoved"/>
			<memberdata name="lshowgripper" type="property" display="lShowGripper"/>
			<memberdata name="showballoontip" type="method" display="ShowBalloonTip"/>
			<memberdata name="setupgripper" type="method" display="SetupGripper"/>
			<memberdata name="ndots" type="property" display="nDots"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'Gripper' AS gripper WITH ;
		Height = 12, ;
		Left = 1, ;
		Name = "Gripper", ;
		Top = -1, ;
		Width = 20, ;
		Gripperdot1.Name = "Gripperdot1", ;
		Gripperdot1.ShapeDark.Name = "ShapeDark", ;
		Gripperdot1.ShapeLight.Name = "ShapeLight", ;
		Gripperdot1.ShapeMiddle.Name = "ShapeMiddle", ;
		Gripperdot2.Name = "Gripperdot2", ;
		Gripperdot2.ShapeDark.Name = "ShapeDark", ;
		Gripperdot2.ShapeLight.Name = "ShapeLight", ;
		Gripperdot2.ShapeMiddle.Name = "ShapeMiddle", ;
		Gripperdot3.Name = "Gripperdot3", ;
		Gripperdot3.ShapeDark.Name = "ShapeDark", ;
		Gripperdot3.ShapeLight.Name = "ShapeLight", ;
		Gripperdot3.ShapeMiddle.Name = "ShapeMiddle", ;
		Gripperdot4.Name = "Gripperdot4", ;
		Gripperdot4.ShapeDark.Name = "ShapeDark", ;
		Gripperdot4.ShapeLight.Name = "ShapeLight", ;
		Gripperdot4.ShapeMiddle.Name = "ShapeMiddle", ;
		Gripperdot5.Name = "Gripperdot5", ;
		Gripperdot5.ShapeDark.Name = "ShapeDark", ;
		Gripperdot5.ShapeLight.Name = "ShapeLight", ;
		Gripperdot5.ShapeMiddle.Name = "ShapeMiddle"
		*< END OBJECT: ClassLib="sfsplitter.vcx" BaseClass="container" />
	
	PROTECTED PROCEDURE getobject1size		&& Gets the size for Object 1
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobject2size		&& Gets the size for Object 2
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE getobjectnames		&& Populates an array from a comma-delimited list
		lparameters tcList, ;
			taArray
		local lnOccurs, ;
			lnStart, ;
			lnI, ;
			lnPos
		lnOccurs = occurs(',', tcList) + 1
		dimension taArray[lnOccurs]
		lnStart = 1
		for lnI = 1 to lnOccurs
			if lnI = lnOccurs
				lnPos = len(tcList) + 1
			else
				lnPos = at(',', tcList, lnI)
			endif lnI = lnOccurs
			taArray[lnI] = alltrim(substr(tcList, lnStart, lnPos - lnStart))
			lnStart = lnPos + 1
		next lnI
		return lnOccurs
		
	ENDPROC

	PROTECTED PROCEDURE getposition		&& Returns the new position: X for a horizontal splitter and Y for a vertical splitter
		* Abstract method.
		
		lparameters tnXCoord, ;
			tnYCoord
		
	ENDPROC

	PROCEDURE Init
		* Make the border invisible and flag that Init has fired.
		
		with This
			.BorderWidth  = 0
			.lInitialized = .T.
			.setupgripper()&& 2008-12-31 By Matt Slay
		endwith
		
		dodefault()
		
		*--- Changes by Matt Slay to use Gripper control 2008-12-31 ----
		* Added a Gripper container class to the VCX. A container consisting of (5) GripperDots.
		* Added a GripprDot container class to the VCX. A container with a single "Dot" comprised of (3) VFP Shape objects with color, size, and position to make a cool shaded "dot".
		* Added an instance of the Gripper object to the Splitter base control.
		* Added nDots property to the Splitter base control.
		* Added the SetupGripper() method to the Splitter base control.
		* Added .SetupGripper() call in the Splitter base control Init() method.
		* Added this.Gripper.RepositionOnResize() call on the Splitter base control Resize() method to keep the Gripper centered when hosting form or container is resized.
		
		
		
		
	ENDPROC

	PROCEDURE MouseMove
		lparameters tnButton, ;
			tnShift, ;
			tnXCoord, ;
			tnYCoord
		local lnPosition
		with This
			if tnButton = 1 and .Enabled
				lnPosition = .GetPosition(tnXCoord, tnYCoord)
				.MoveSplitterToPosition(lnPosition)
			endif tnButton = 1 ...
		endwith
		
	ENDPROC

	PROTECTED PROCEDURE moveobject1		&& Moves Object 1 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROTECTED PROCEDURE moveobject2		&& Moves Object 2 to the new position
		* Abstract method.
		
		lparameters toObject
		
	ENDPROC

	PROCEDURE movesplittertoposition		&& Moves the splitter to the specified position
		* Move the splitter to the specified position. Ensure it doesn't go too far,
		* based on the nObject1MinSize and nObject2MinSize settings.
		
		lparameters tnPosition
		local lnPosition, ;
			laObjects[1], ;
			lnObjects, ;
			lnI, ;
			loObject, ;
			lnAnchor
		with This
			lnPosition = tnPosition
			lnObjects  = .GetObjectNames(.cObject1Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject   = evaluate('.Parent.' + laObjects[lnI])
				lnPosition = max(lnPosition, .GetObject1Size(loObject))
			next lnI
			lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject   = evaluate('.Parent.' + laObjects[lnI])
				lnPosition = min(lnPosition, .GetObject2Size(loObject))
			next lnI
			lnAnchor = .Anchor
			.Anchor  = 0
			.SetPosition(lnPosition)
			.Anchor  = lnAnchor
		
		* Now move the left and right objects as well.
		
			lnObjects = .GetObjectNames(.cObject1Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				with loObject
					lnAnchor = .Anchor
					.Anchor  = 0
					This.MoveObject1(loObject)
					.Anchor = lnAnchor
				endwith
			next lnI
			lnObjects = .GetObjectNames(.cObject2Name, @laObjects)
			for lnI = 1 to lnObjects
				loObject = evaluate('.Parent.' + laObjects[lnI])
				with loObject
					lnAnchor = .Anchor
					.Anchor  = 0
					This.MoveObject2(loObject)
					.Anchor = lnAnchor
				endwith
			next lnI
		
		* Call a hook method.
		
			.SplitterMoved()
		endwith
		
	ENDPROC

	PROCEDURE Resize
		this.Gripper.RepositionOnResize() && 2008-12-31 Added by Matt Slay to keep Gripper centered when form is resized.
		
		Dodefault()
		
	ENDPROC

	PROTECTED PROCEDURE setposition		&& Sets the new position for the splitter
		* Abstract method.
		
		lparameters tnPosition
		
	ENDPROC

	PROCEDURE setupgripper		&& A method to setup various properties on the gripper to visually configure it for Vertical or Horizontal configuration.
		*-- Method added by Matt Slay - 2009-01-04
		
		 this.Gripper.nDots=this.nDots
		 this.Gripper.SetupGripper()
		
		
	ENDPROC

	PROCEDURE splittermoved		&& Called after the splitter is moved
		* Abstract method.
		
	ENDPROC

ENDDEFINE
