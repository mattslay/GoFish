*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="gf_collection_explorer.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
DEFINE CLASS frmcollectionexplorer AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFullPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="olePropList" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getobjectreference		&& Returns the object reference to the item represented by a node.
		*m: loadcollection		&& Loads a collection object into the treeview.
		*m: loaditems		&& Loads the items in a collection into the treeview.
		*m: loadmembers		&& Loads the member objects of an object into the tree view.
		*m: loadobject		&& Loads an object into the TreeView.
		*m: loadproperties		&& Loads the properties of an object into the treeview.
		*m: newkey		&& Creates a new key for a node added to the tree.
		*m: newnode		&& Adds an empty node to the treeview.
		*m: showproperties		&& Displays the properties for the passed node.
		*p: lshowarrays		&& Indicates that arrays should be displayed in the treeview.
		*p: lshowitems		&& Indicates the items in a collection should be displayed in the tree.
		*p: lshowmemberobjects		&& Indicates that member objects should be displayed in the treeview.
		*p: lshowobjectreferences		&& Indicates that properties that hold object references should be added to the treeview.
		*p: lshowproperties		&& Indicates that all properties should be displayed in the list view.
		*p: ocollection		&& Contains an object reference to the top level collection in the treeview.
		*p: ofirstobject		&& Stores an object reference to the top most object in the treeview.
		*p: oflatcollection		&& Contains references to all of the items in all collections, without regard for hierarchy.
		*a: apems[1,0]
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "Collection Explorer"
		DoCreate = .T.
		Height = 407
		Left = 1
		lshowarrays = .T.
		lshowitems = .T.
		lshowmemberobjects = .T.
		lshowobjectreferences = .T.
		lshowproperties = .T.
		Name = "frmCollectionExplorer"
		ocollection = NULL
		ofirstobject = .NULL.
		oflatcollection = .NULL.
		Top = 0
		Width = 468
		WindowType = 1
	*</PropValue>

	ADD OBJECT 'olePropList' AS olecontrol WITH ;
		Anchor = 45, ;
		Height = 331, ;
		Left = 168, ;
		Name = "olePropList", ;
		Top = 0, ;
		Width = 290
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBJJ//1Zc0BAwAAAAACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMUAAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAABwi4XREbFqAMDwKDYoIUM0EggAAAD5HQAANiIAAE4IfesBAAYAHAAAAAAAAAAAAAAAIxIAAPkdAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTF5AHMAdABlAG0AMwAyAFwAaQBuAGUAdABzAHIAdgBcAGMAbgABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAACgAAAExhYmVsRWRpdAAJAAAASQoAAAABAAAADQAAAE1vAAAFAEhKjgQDAAAACAAAgAUAAIA4uFkLAAAAAAAAAAAAAAAAH97svQEABQCwt1kLAAA3ADgAQgB9ACAAQwA6AHVzZVBvaW50ZXIACQAAAEkKAAAAAAAAAAUAAABWaWV3AAkAAABJCgAAAAMAAAALAAAAQXBwZWFyYW5jZQAJAAAASQoAAAAAAAAAEwAAAEFsbG93Q29sdW1uUmVvcmRlcgAFAAAATAEAAAAOAAAARmxhdFNjcm9sbEJhcgAFAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'oleTree' AS olecontrol WITH ;
		Anchor = 135, ;
		Height = 328, ;
		Left = 4, ;
		Name = "oleTree", ;
		Top = 0, ;
		Width = 157
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="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" />

	ADD OBJECT 'txtFullPath' AS textbox WITH ;
		Anchor = 14, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 72, ;
		Left = 3, ;
		Name = "txtFullPath", ;
		NullDisplay = "", ;
		Top = 333, ;
		Width = 456
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Destroy
		This.oFirstObject = NULL	
		This.oCollection = NULL
		This.oFlatCollection.Remove(-1)
		This.oFlatCollection = NULL
		
	ENDPROC

	PROCEDURE getobjectreference		&& Returns the object reference to the item represented by a node.
		LPARAMETERS ;
			toNode
			
		LOCAL ;
			loReturn, ;
			loItem, ;
			lnIndex, ;
			loTemp
			
		lnIndex = 0
		loReturn = NULL
		TRY
			loTemp = This.oFlatcollection.Item(toNode.Tag)
		CATCH
			loTemp = NULL
		ENDTRY
		
		* We have to iterate the collection to find the object in order
		* to get a Fox reference vs. a COM reference.
		IF NOT ISNULL(loTemp)
			FOR EACH loItem IN This.oFlatcollection FOXOBJECT
				IF COMPOBJ(loTemp,loItem)
		*!*			IF loItem == loTemp
		*!*			lnIndex = lnIndex + 1
		*!*			IF loItem.Tag == toNode.Tag
					loReturn = loItem
					EXIT
				ENDIF
			NEXT
		ENDIF
		*!*	loReturn = Thisform.oFlatCollection.Item(toNode.Index)
		RETURN loReturn
	ENDPROC

	PROCEDURE Init
		LPARAMETERS ;
			toObject
			
		This.oFlatcollection = CREATEOBJECT([Collection])
		IF PCOUNT() = 1
			This.LoadObject(toObject)
		ELSE
			MESSAGEBOX([You must pass an object to start exploring from to this form.])
		ENDIF
		
	ENDPROC

	PROCEDURE loadcollection		&& Loads a collection object into the treeview.
		LPARAMETERS ;
			toCollection AS Collection , ;
			tcMemberProperty, ;
			toParent
		
		LOCAL ;
			loItem AS Object, ;
			lcMemberProperty, ;
			loNode, ;
			lnI, ;
			lnItemNo, ;
			loObject, ;
			loMemberNode, ;
			lnJ, ;
			lvPropVal, ;
			loE
			
		IF TYPE([toCollection]) <> [O]
			RETURN
		ENDIF
			
		
		
		LOCAL ARRAY laMembers[1]
		*!*	IF PCOUNT() < 3
		*!*		This.oCollection = toCollection
		*!*	ENDIF	
		
		lcMemberProperty = IIF(TYPE("tcMemberProperty") = [C], tcMemberProperty,[Name])
		lnItemNo = 0	
		*!*	FOR EACH loItem IN toCollection FOXOBJECT
		FOR lnI = 1 TO toCollection.Count
			loItem = toCollection.Item(lnI)
			
			lnItemNo = lnItemNo+1
			This.oFlatcollection.Add(loItem)
		*!*		loItem2 = This.oFlatcollection.Item(This.oFlatcollection.Count)
			loNode = This.oleTree.Nodes.Add()
			IF PCOUNT() = 3
				loNode.Parent = toParent
			ENDIF
		
		
			IF PEMSTATUS(loItem,lcMemberProperty,5)
				loNode.Text = EVALUATE([loItem.]+lcMemberProperty)
			ELSE
				loNode.Text = [Item]+TRANSFORM(lnItemNo)
			ENDIF
		*!*		FOR lnJ = 1 TO AMEMBERS(laMembers,loItem,2)
			FOR lnJ = 1 TO AMEMBERS(laMembers,loItem,1)
		
		
				DO CASE
				CASE TYPE([loItem.]+laMembers[lnJ,1]) = [O]
					loMemberNode = This.oleTree.Nodes.Add()
					loMemberNode.Parent = loNode
					loObject = EVALUATE([loItem.]+laMembers[lnJ,1])
					loMemberNode.Text = laMembers[lnJ,1]
		*!*				IF PEMSTATUS(loObject,lcMemberProperty,5)
		*!*					loMemberNode.Text = EVALUATE([loObject.]+lcMemberProperty)
		*!*				ELSE
		*!*					loMemberNode.Text = [Item]+TRANSFORM(lnItemNo)
		*!*				ENDIF
					This.oFlatcollection.Add(loObject)
					IF PEMSTATUS(loObject,[Item],5)
						This.LoadCollection(loObject, lcMemberProperty, loMemberNode)
					ENDIF
					loMemberNode.Expanded = .F.
					IF PEMSTATUS(loItem,[Item],5)
						This.LoadCollection(loItem, lcMemberProperty, loNode)
					ENDIF
				CASE TYPE([loItem.]+laMembers[lnJ,1],1) = [A]
					loMemberNode = This.oleTree.Nodes.Add()
					loMemberNode.Parent = loNode
					loMemberNode.Text = laMembers[lnJ,1]
					This.oFlatcollection.Add(EVALUATE([loItem.]+laMembers[lnJ,1]))
					
				ENDCASE
			NEXT
			
		
			loNode.Expanded = .F.
		
		NEXT
		IF ISNULL(This.oleTree.SelectedItem) AND This.oleTree.Nodes.Count>0
			This.oleTree.SelectedItem = This.oleTree.Nodes.Item(1)
			This.oleTree.NodeClick(This.oleTree.Nodes.Item(1))
		ENDIF
		
	ENDPROC

	PROCEDURE loaditems		&& Loads the items in a collection into the treeview.
		LPARAMETERS ;
			toObject, ;
			toParentNode
			
		LOCAL ;
			loNode, ;
			lnI, ;
			lvItem
			
		IF This.lShowItems AND TYPE([toObject.Count]) = [N]
			TRY
				FOR lnI = 1 TO toObject.Count
					lvItem = toObject.Item(lnI)
					IF TYPE([lvItem]) = [O]
						This.LoadObject(lvItem, toParentNode)
					ELSE
						loNode = This.NewNode()
						loNode.Parent = toParentNode
						loNode.Text = TRANSFORM(lvItem)
					ENDIF
				NEXT
			CATCH TO foo
			ENDTRY
		ENDIF
		
					
	ENDPROC

	PROCEDURE loadmembers		&& Loads the member objects of an object into the tree view.
		LPARAMETERS ;
			toObject, ;
			toParentNode
		
		LOCAL ;
			loObject, ;
			lnI
		
		LOCAL ARRAY laMembers[1]	
		IF This.lShowMemberobjects AND TYPE([toObject])= [O]
			FOR lnI = 1 TO AMEMBERS(laMembers,toObject,2)
				loObject = EVALUATE([toObject.] + laMembers[lnI])
				This.LoadObject(loObject, toParentNode, laMembers[lnI])
			NEXT
		ENDIF
			
	ENDPROC

	PROCEDURE loadobject		&& Loads an object into the TreeView.
		LPARAMETERS ;
			toObject, ;
			toParentNode, ;
			tcName
		
		LOCAL ;
			lcName, ;
			loNode, ;
			loDummyNode, ;
			lcKey
		
		WITH This
			IF ISNULL(.oFirstObject)
				.oFirstObject = toObject
				.oleTree.Nodes.Clear()
			ENDIF
		
			lcName = SYS(1272,toObject)
			loNode = .oleTree.Nodes.Add()
			lcKey = This.Newkey(.t.)
			loNode.Tag = lcKey
			
			IF TYPE([toParentNode.Text]) = T_CHARACTER
				loNode.Parent = toParentNode
			ENDIF
			
			DO CASE
			CASE NOT EMPTY(tcName) AND TYPE([tcName]) = T_CHARACTER
				loNode.Text = tcName
			CASE NOT EMPTY(lcName) AND lcName <> [unknown type]
				loNode.Text = lcName
			CASE PEMSTATUS(toObject,[Name],5)
				loNode.Text = toObject.Name
			CASE PEMSTATUS(toObject,[Class],5)
				loNode.Text = toObject.Class
			OTHERWISE
				loNode.Text = [Object]
			ENDCASE
		
			.oFlatCollection.Add(toObject,lcKey)
			
		*!*		.LoadItems(toObject, loNode)
		*!*		.LoadMembers(toObject, loNode)
		*!*		.LoadProperties(toObject, loNode)
			loDummyNode = This.oleTree.Nodes.Add()
			loDummyNode.Text = [(Loading...)]
			loDummyNode.Parent=loNode
			
			loNode.Expanded = .F.
		ENDWITH
		RETURN
		
	ENDPROC

	PROCEDURE loadproperties		&& Loads the properties of an object into the treeview.
		LPARAMETERS ;
			toObject, ;
			toParentNode
		
		LOCAL ;
			lvProperty, ;
			lnI, ;
			loObject, ;
			lnJ, ;
			loCollectionNode
			
		IF TYPE([toObject]) <> [O]
			RETURN
		ENDIF
		
		LOCAL ARRAY laMembers[1]
		FOR lnI = 1 TO AMEMBERS(laMembers,toObject)
			TRY
				lvProperty = EVALUATE([toObject.] + laMembers[lnI])
			CATCH
				lvProperty = NULL
			ENDTRY
			DO CASE
			CASE TYPE([lvProperty]) = [O] AND NOT ISNULL(lvProperty)
				This.LoadObject(lvProperty, toParentNode, laMembers[lnI])
			CASE TYPE([toObject.] + laMembers[lnI],1) = [A]
		*!*			WAIT WINDOW laMembers[lnI]
			CASE TYPE([toObject.] + laMembers[lnI],1) = [C]
		*!*			This.LoadCollection(EVALUATE([toObject.] + laMembers[lnI]), toParentNode, laMembers[lnI])
				
				loCollectionNode = Null
				TRY
					FOR lnJ = 1 TO EVALUATE([toObject.] + laMembers[lnI] + [.Count])
		*!*					loObject = EVALUATE([toObject.] + laMembers[lnI] + [.Item(] + TRANSFORM(lnJ) + [)])
						loObject = EVALUATE([toObject.] + laMembers[lnI] + [(] + TRANSFORM(lnJ) + [)])
						IF ISNULL(loCollectionNode)
							loCollectionNode = This.oleTree.Nodes.Add()
							loCollectionNode.Parent = toParentNode
							loCollectionNode.Text = laMembers[lnI]
						ENDIF
						This.LoadObject(loObject, loCollectionNode)
					NEXT
				CATCH TO Foo
		*!*				WAIT WINDOW MESSAGE() + CHR(13) + laMembers[lnI]
				ENDTRY
				loCollectionNode = NULL
			ENDCASE
		NEXT
		
			
	ENDPROC

	PROCEDURE newkey		&& Creates a new key for a node added to the tree.
		* Code from http://fox.wikis.com/wc.dll?Wiki~GUID~VFP
		*== F9GUID
		*== Create a new GUID character string,
		*== optionally retaining the declared Windows functions
		LPARAMETERS tlNoClear
		LOCAL lcBuffer, ;
			lcReturnValue, ;
			llNoClear, ;
			lnFuncVal
		
		*-- Define local variables
		lcBuffer      = REPLICATE( CHR( 0 ), 256 )
		lcReturnValue = []
		llNoClear     = IIF( PCOUNT() > 0 AND VARTYPE( tlNoClear ) = "L", ;
					tlNoClear, ;
					.f. ;
				)
		lnFuncVal     = 0
		
		*-- Declare DLL functions
		DECLARE INTEGER CoCreateGuid ;
			IN Ole32.DLL ;
			STRING @pGuid
		DECLARE INTEGER StringFromGUID2 ;
			IN Ole32.DLL ;
			STRING rguid, STRING @lpsz, INTEGER cchMax
		
		*-- Initialize a buffer to hold the GUID value
		pGuid = REPLICATE( CHR( 0 ), 17 )
		
		*-- Call the CoCreateGuid function
		lnFuncVal = CoCreateGuid( @pGuid )
		
		*-- If the DLL function returned zero,
		*-- the function was successful,
		*-- so build a string of the GUID data
		IF lnFuncVal = 0
			= StringFromGUID2( pGuid, @lcBuffer, 128 )
		
			*-- Truncate the GUID string to the desired length
			lcBuffer = SUBSTR( lcBuffer, ;
						1, ;
						AT( CHR( 0 ) + CHR( 0 ), lcBuffer ) ;
					)
		
			*-- Convert the string
			lcReturnValue = STRCONV( lcBuffer, 6 )
		
		ENDIF && lnFuncVal = 0
		
		*-- Unless the calling module chose not to,
		*-- clear the instantiated DLLs from memory
		IF !llNoClear
			CLEAR DLLS "StringFromGUID2"
			CLEAR DLLS "CoCreateGuid"
		
		ENDIF && !tlNoClear
		
		*-- Clean up and return
		RETURN ( lcReturnValue )
		
		*== End module F9GUID
		
	ENDPROC

	PROCEDURE newnode		&& Adds an empty node to the treeview.
		LOCAL ;
			loNode
			
		loNode = This.oleTree.Nodes.Add()
		RETURN loNode
		
	ENDPROC

	PROCEDURE showproperties		&& Displays the properties for the passed node.
		LPARAMETERS ;
			toNode
			
		LOCAL ;
			loItem, ;
			lcPropVal, ;
			lnI, ;
			loRow
			
		LOCAL ARRAY laPems[1]
		This.olePropList.ListItems.Clear()
		loItem = Thisform.GetObjectReference(toNode)
		IF NOT ISNULL(loItem)
			FOR lnI = 1 TO AMEMBERS(laPems,loItem)
				loRow = This.olePropList.ListItems.Add()
				loRow.Text = laPems[lnI]
				TRY
					lcPropVal = TRANSFORM(EVALUATE([loItem.]+laPems[lnI]))
				CATCH
					* This occurs when a property that would normally reference an object,
					* such as parent, does not return an object reference.
					lcPropVal = [(none)]
				ENDTRY
				loRow.SubItems(1)=lcPropVal
			NEXT
		ENDIF
		Thisform.txtFullPath.Value = toNode.fullpath
		
	ENDPROC

	PROCEDURE olePropList.Init
		loColumn = This.ColumnHeaders.Add()
		loColumn.Width = This.Width/2
		loColumn.Text = [Property]
		
		loColumn = This.ColumnHeaders.Add()
		loColumn.Width = This.Width/2
		loColumn.Text = [Value]
		
	ENDPROC

	PROCEDURE oleTree.Expand
		*** ActiveX Control Event ***
		LPARAMETERS toNode
		LOCAL ;
			loObject, ;
			loNode, ;
			lnI
		
		
		loObject = Thisform.GetObjectReference(toNode)
		FOR lnI = 1 TO toNode.Children
			IF NOT EMPTY(toNode.Child.Tag)
				Thisform.oFlatcollection.Remove(toNode.Child.Tag)
			ENDIF
			This.Nodes.Remove(toNode.Child.Index)
		NEXT
		loObject = Thisform.GetObjectReference(toNode)
		
		WITH Thisform
			.LoadItems(loObject, toNode)
			.LoadMembers(loObject, toNode)
			.LoadProperties(loObject, toNode)
		ENDWITH
	ENDPROC

	PROCEDURE oleTree.NodeClick
		*** ActiveX Control Event ***
		LPARAMETERS node
		Thisform.ShowProperties(Node)
		
	ENDPROC

ENDDEFINE
